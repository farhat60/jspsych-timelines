{"version":3,"sources":["../../../node_modules/auto-bind/index.js","../../../node_modules/seedrandom/lib/alea.js","../../../node_modules/seedrandom/lib/xor128.js","../../../node_modules/seedrandom/lib/xorwow.js","../../../node_modules/seedrandom/lib/xorshift7.js","../../../node_modules/seedrandom/lib/xor4096.js","../../../node_modules/seedrandom/lib/tychei.js","../../../node_modules/seedrandom/seedrandom.js","../../../node_modules/seedrandom/index.js","../../../node_modules/random-words/index.js","../../../node_modules/jspsych/src/modules/plugins.ts","../../../node_modules/jspsych/src/modules/plugin-api/MediaAPI.ts","../../../node_modules/jspsych/src/migration.ts","../../../node_modules/jspsych/src/index.ts","../../../node_modules/@jspsych/plugin-html-button-response/package.json","../../../node_modules/@jspsych/plugin-html-button-response/src/index.ts","../src/test-categories.ts","../src/text.ts","../src/index.ts"],"names":["self","module","define","me","seed","seedrandom","prng","t","i","j","s","require_seedrandom","word","ParameterType"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// Gets all non-builtin properties up the prototype chain\nconst getAllProperties = object => {\n\tconst properties = new Set();\n\n\tdo {\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tproperties.add([object, key]);\n\t\t}\n\t} while ((object = Reflect.getPrototypeOf(object)) && object !== Object.prototype);\n\n\treturn properties;\n};\n\nmodule.exports = (self, {include, exclude} = {}) => {\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\n\t\tif (include) {\n\t\t\treturn include.some(match);\n\t\t}\n\n\t\tif (exclude) {\n\t\t\treturn !exclude.some(match);\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tfor (const [object, key] of getAllProperties(self.constructor.prototype)) {\n\t\tif (key === 'constructor' || !filter(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst descriptor = Reflect.getOwnPropertyDescriptor(object, key);\n\t\tif (descriptor && typeof descriptor.value === 'function') {\n\t\t\tself[key] = self[key].bind(self);\n\t\t}\n\t}\n\n\treturn self;\n};\n","// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010\n// http://baagoe.com/en/RandomMusings/javascript/\n// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror\n// Original work is under MIT license -\n\n// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n\n\n(function(global, module, define) {\n\nfunction Alea(seed) {\n  var me = this, mash = Mash();\n\n  me.next = function() {\n    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32\n    me.s0 = me.s1;\n    me.s1 = me.s2;\n    return me.s2 = t - (me.c = t | 0);\n  };\n\n  // Apply the seeding algorithm from Baagoe.\n  me.c = 1;\n  me.s0 = mash(' ');\n  me.s1 = mash(' ');\n  me.s2 = mash(' ');\n  me.s0 -= mash(seed);\n  if (me.s0 < 0) { me.s0 += 1; }\n  me.s1 -= mash(seed);\n  if (me.s1 < 0) { me.s1 += 1; }\n  me.s2 -= mash(seed);\n  if (me.s2 < 0) { me.s2 += 1; }\n  mash = null;\n}\n\nfunction copy(f, t) {\n  t.c = f.c;\n  t.s0 = f.s0;\n  t.s1 = f.s1;\n  t.s2 = f.s2;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new Alea(seed),\n      state = opts && opts.state,\n      prng = xg.next;\n  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; }\n  prng.double = function() {\n    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53\n  };\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nfunction Mash() {\n  var n = 0xefc8249d;\n\n  var mash = function(data) {\n    data = String(data);\n    for (var i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      var h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n\n  return mash;\n}\n\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.alea = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xor128\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n\n  // Set up generator function.\n  me.next = function() {\n    var t = me.x ^ (me.x << 11);\n    me.x = me.y;\n    me.y = me.z;\n    me.z = me.w;\n    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);\n  };\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor128 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorwow\" prng algorithm by\n// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var t = (me.x ^ (me.x >>> 2));\n    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;\n    return (me.d = (me.d + 362437 | 0)) +\n       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;\n  };\n\n  me.x = 0;\n  me.y = 0;\n  me.z = 0;\n  me.w = 0;\n  me.v = 0;\n\n  if (seed === (seed | 0)) {\n    // Integer seed.\n    me.x = seed;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 64; k++) {\n    me.x ^= strseed.charCodeAt(k) | 0;\n    if (k == strseed.length) {\n      me.d = me.x << 10 ^ me.x >>> 4;\n    }\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.x = f.x;\n  t.y = f.y;\n  t.z = f.z;\n  t.w = f.w;\n  t.v = f.v;\n  t.d = f.d;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorwow = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","// A Javascript implementaion of the \"xorshift7\" algorithm by\n// François Panneton and Pierre L'ecuyer:\n// \"On the Xorgshift Random Number Generators\"\n// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    // Update xor generator.\n    var X = me.x, i = me.i, t, v, w;\n    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);\n    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);\n    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);\n    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);\n    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);\n    X[i] = v;\n    me.i = (i + 1) & 7;\n    return v;\n  };\n\n  function init(me, seed) {\n    var j, w, X = [];\n\n    if (seed === (seed | 0)) {\n      // Seed state array using a 32-bit integer.\n      w = X[0] = seed;\n    } else {\n      // Seed state using a string.\n      seed = '' + seed;\n      for (j = 0; j < seed.length; ++j) {\n        X[j & 7] = (X[j & 7] << 15) ^\n            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);\n      }\n    }\n    // Enforce an array length of 8, not all zeroes.\n    while (X.length < 8) X.push(0);\n    for (j = 0; j < 8 && X[j] === 0; ++j);\n    if (j == 8) w = X[7] = -1; else w = X[j];\n\n    me.x = X;\n    me.i = 0;\n\n    // Discard an initial 256 values.\n    for (j = 256; j > 0; --j) {\n      me.next();\n    }\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.x = f.x.slice();\n  t.i = f.i;\n  return t;\n}\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.x) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xorshift7 = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n","// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.\n//\n// This fast non-cryptographic random number generator is designed for\n// use in Monte-Carlo algorithms. It combines a long-period xorshift\n// generator with a Weyl generator, and it passes all common batteries\n// of stasticial tests for randomness while consuming only a few nanoseconds\n// for each prng generated.  For background on the generator, see Brent's\n// paper: \"Some long-period random number generators using shifts and xors.\"\n// http://arxiv.org/pdf/1004.3115v1.pdf\n//\n// Usage:\n//\n// var xor4096 = require('xor4096');\n// random = xor4096(1);                        // Seed with int32 or string.\n// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.\n// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.\n//\n// For nonzero numeric keys, this impelementation provides a sequence\n// identical to that by Brent's xorgens 3 implementaion in C.  This\n// implementation also provides for initalizing the generator with\n// string seeds, or for saving and restoring the state of the generator.\n//\n// On Chrome, this prng benchmarks about 2.1 times slower than\n// Javascript's built-in Math.random().\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this;\n\n  // Set up generator function.\n  me.next = function() {\n    var w = me.w,\n        X = me.X, i = me.i, t, v;\n    // Update Weyl generator.\n    me.w = w = (w + 0x61c88647) | 0;\n    // Update xor generator.\n    v = X[(i + 34) & 127];\n    t = X[i = ((i + 1) & 127)];\n    v ^= v << 13;\n    t ^= t << 17;\n    v ^= v >>> 15;\n    t ^= t >>> 12;\n    // Update Xor generator array state.\n    v = X[i] = v ^ t;\n    me.i = i;\n    // Result is the combination.\n    return (v + (w ^ (w >>> 16))) | 0;\n  };\n\n  function init(me, seed) {\n    var t, v, i, j, w, X = [], limit = 128;\n    if (seed === (seed | 0)) {\n      // Numeric seeds initialize v, which is used to generates X.\n      v = seed;\n      seed = null;\n    } else {\n      // String seeds are mixed into v and X one character at a time.\n      seed = seed + '\\0';\n      v = 0;\n      limit = Math.max(limit, seed.length);\n    }\n    // Initialize circular array and weyl value.\n    for (i = 0, j = -32; j < limit; ++j) {\n      // Put the unicode characters into the array, and shuffle them.\n      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);\n      // After 32 shuffles, take v as the starting w value.\n      if (j === 0) w = v;\n      v ^= v << 10;\n      v ^= v >>> 15;\n      v ^= v << 4;\n      v ^= v >>> 13;\n      if (j >= 0) {\n        w = (w + 0x61c88647) | 0;     // Weyl.\n        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.\n        i = (0 == t) ? i + 1 : 0;     // Count zeroes.\n      }\n    }\n    // We have detected all zeroes; make the key nonzero.\n    if (i >= 128) {\n      X[(seed && seed.length || 0) & 127] = -1;\n    }\n    // Run the generator 512 times to further mix the state before using it.\n    // Factoring this as a function slows the main generator, so it is just\n    // unrolled here.  The weyl generator is not advanced while warming up.\n    i = 127;\n    for (j = 4 * 128; j > 0; --j) {\n      v = X[(i + 34) & 127];\n      t = X[i = ((i + 1) & 127)];\n      v ^= v << 13;\n      t ^= t << 17;\n      v ^= v >>> 15;\n      t ^= t >>> 12;\n      X[i] = v ^ t;\n    }\n    // Storing state as object members is faster than using closure variables.\n    me.w = w;\n    me.X = X;\n    me.i = i;\n  }\n\n  init(me, seed);\n}\n\nfunction copy(f, t) {\n  t.i = f.i;\n  t.w = f.w;\n  t.X = f.X.slice();\n  return t;\n};\n\nfunction impl(seed, opts) {\n  if (seed == null) seed = +(new Date);\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (state.X) copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.xor4096 = impl;\n}\n\n})(\n  this,                                     // window object or global\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n","// A Javascript implementaion of the \"Tyche-i\" prng algorithm by\n// Samuel Neves and Filipe Araujo.\n// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n\n(function(global, module, define) {\n\nfunction XorGen(seed) {\n  var me = this, strseed = '';\n\n  // Set up generator function.\n  me.next = function() {\n    var b = me.b, c = me.c, d = me.d, a = me.a;\n    b = (b << 25) ^ (b >>> 7) ^ c;\n    c = (c - d) | 0;\n    d = (d << 24) ^ (d >>> 8) ^ a;\n    a = (a - b) | 0;\n    me.b = b = (b << 20) ^ (b >>> 12) ^ c;\n    me.c = c = (c - d) | 0;\n    me.d = (d << 16) ^ (c >>> 16) ^ a;\n    return me.a = (a - b) | 0;\n  };\n\n  /* The following is non-inverted tyche, which has better internal\n   * bit diffusion, but which is about 25% slower than tyche-i in JS.\n  me.next = function() {\n    var a = me.a, b = me.b, c = me.c, d = me.d;\n    a = (me.a + me.b | 0) >>> 0;\n    d = me.d ^ a; d = d << 16 ^ d >>> 16;\n    c = me.c + d | 0;\n    b = me.b ^ c; b = b << 12 ^ d >>> 20;\n    me.a = a = a + b | 0;\n    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;\n    me.c = c = c + d | 0;\n    b = b ^ c;\n    return me.b = (b << 7 ^ b >>> 25);\n  }\n  */\n\n  me.a = 0;\n  me.b = 0;\n  me.c = 2654435769 | 0;\n  me.d = 1367130551;\n\n  if (seed === Math.floor(seed)) {\n    // Integer seed.\n    me.a = (seed / 0x100000000) | 0;\n    me.b = seed | 0;\n  } else {\n    // String seed.\n    strseed += seed;\n  }\n\n  // Mix in string seed, then discard an initial batch of 64 values.\n  for (var k = 0; k < strseed.length + 20; k++) {\n    me.b ^= strseed.charCodeAt(k) | 0;\n    me.next();\n  }\n}\n\nfunction copy(f, t) {\n  t.a = f.a;\n  t.b = f.b;\n  t.c = f.c;\n  t.d = f.d;\n  return t;\n};\n\nfunction impl(seed, opts) {\n  var xg = new XorGen(seed),\n      state = opts && opts.state,\n      prng = function() { return (xg.next() >>> 0) / 0x100000000; };\n  prng.double = function() {\n    do {\n      var top = xg.next() >>> 11,\n          bot = (xg.next() >>> 0) / 0x100000000,\n          result = (top + bot) / (1 << 21);\n    } while (result === 0);\n    return result;\n  };\n  prng.int32 = xg.next;\n  prng.quick = prng;\n  if (state) {\n    if (typeof(state) == 'object') copy(state, xg);\n    prng.state = function() { return copy(xg, {}); }\n  }\n  return prng;\n}\n\nif (module && module.exports) {\n  module.exports = impl;\n} else if (define && define.amd) {\n  define(function() { return impl; });\n} else {\n  this.tychei = impl;\n}\n\n})(\n  this,\n  (typeof module) == 'object' && module,    // present in node.js\n  (typeof define) == 'function' && define   // present with an AMD loader\n);\n\n\n","/*\nCopyright 2019 David Bau.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*/\n\n(function (global, pool, math) {\n//\n// The following constants are related to IEEE 754 limits.\n//\n\nvar width = 256,        // each RC4 output is 0 <= x < 256\n    chunks = 6,         // at least six RC4 outputs for each double\n    digits = 52,        // there are 52 significant digits in a double\n    rngname = 'random', // rngname: name for Math.random and Math.seedrandom\n    startdenom = math.pow(width, chunks),\n    significance = math.pow(2, digits),\n    overflow = significance * 2,\n    mask = width - 1,\n    nodecrypto;         // node.js crypto module, initialized at the bottom.\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nfunction seedrandom(seed, options, callback) {\n  var key = [];\n  options = (options == true) ? { entropy: true } : (options || {});\n\n  // Flatten the seed string or build one from local entropy if needed.\n  var shortseed = mixkey(flatten(\n    options.entropy ? [seed, tostring(pool)] :\n    (seed == null) ? autoseed() : seed, 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  var arc4 = new ARC4(key);\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n  var prng = function() {\n    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48\n        d = startdenom,                 //   and denominator d = 2 ^ 48.\n        x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  prng.int32 = function() { return arc4.g(4) | 0; }\n  prng.quick = function() { return arc4.g(4) / 0x100000000; }\n  prng.double = prng;\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(tostring(arc4.S), pool);\n\n  // Calling convention: what to return as a function of prng, seed, is_math.\n  return (options.pass || callback ||\n      function(prng, seed, is_math_call, state) {\n        if (state) {\n          // Load the arc4 state from the given state if it has an S array.\n          if (state.S) { copy(state, arc4); }\n          // Only provide the .state method if requested via options.state.\n          prng.state = function() { return copy(arc4, {}); }\n        }\n\n        // If called as a method of Math (Math.seedrandom()), mutate\n        // Math.random because that is how seedrandom.js has worked since v1.0.\n        if (is_math_call) { math[rngname] = prng; return seed; }\n\n        // Otherwise, it is a newer calling convention, so return the\n        // prng directly.\n        else return prng;\n      })(\n  prng,\n  shortseed,\n  'global' in options ? options.global : (this == math),\n  options.state);\n}\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\nfunction ARC4(key) {\n  var t, keylen = key.length,\n      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) {\n    s[i] = i++;\n  }\n  for (i = 0; i < width; i++) {\n    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];\n    s[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  (me.g = function(count) {\n    // Using instance members instead of closure state nearly doubles speed.\n    var t, r = 0,\n        i = me.i, j = me.j, s = me.S;\n    while (count--) {\n      t = s[i = mask & (i + 1)];\n      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];\n    }\n    me.i = i; me.j = j;\n    return r;\n    // For robust unpredictability, the function call below automatically\n    // discards an initial batch of values.  This is called RC4-drop[256].\n    // See http://google.com/search?q=rsa+fluhrer+response&btnI\n  })(width);\n}\n\n//\n// copy()\n// Copies internal state of ARC4 to or from a plain object.\n//\nfunction copy(f, t) {\n  t.i = f.i;\n  t.j = f.j;\n  t.S = f.S.slice();\n  return t;\n};\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\nfunction flatten(obj, depth) {\n  var result = [], typ = (typeof obj), prop;\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n    }\n  }\n  return (result.length ? result : typ == 'string' ? obj : obj + '\\0');\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\nfunction mixkey(seed, key) {\n  var stringseed = seed + '', smear, j = 0;\n  while (j < stringseed.length) {\n    key[mask & j] =\n      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));\n  }\n  return tostring(key);\n}\n\n//\n// autoseed()\n// Returns an object for autoseeding, using window.crypto and Node crypto\n// module if available.\n//\nfunction autoseed() {\n  try {\n    var out;\n    if (nodecrypto && (out = nodecrypto.randomBytes)) {\n      // The use of 'out' to remember randomBytes makes tight minified code.\n      out = out(width);\n    } else {\n      out = new Uint8Array(width);\n      (global.crypto || global.msCrypto).getRandomValues(out);\n    }\n    return tostring(out);\n  } catch (e) {\n    var browser = global.navigator,\n        plugins = browser && browser.plugins;\n    return [+new Date, global, plugins, global.screen, tostring(pool)];\n  }\n}\n\n//\n// tostring()\n// Converts an array of charcodes to a string\n//\nfunction tostring(a) {\n  return String.fromCharCode.apply(0, a);\n}\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to interfere with deterministic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n//\n// Nodejs and AMD support: export the implementation as a module using\n// either convention.\n//\nif ((typeof module) == 'object' && module.exports) {\n  module.exports = seedrandom;\n  // When in node.js, try using crypto package for autoseeding.\n  try {\n    nodecrypto = require('crypto');\n  } catch (ex) {}\n} else if ((typeof define) == 'function' && define.amd) {\n  define(function() { return seedrandom; });\n} else {\n  // When included as a plain script, set up Math.seedrandom global.\n  math['seed' + rngname] = seedrandom;\n}\n\n\n// End anonymous scope, and pass initial values.\n})(\n  // global: `self` in browsers (including strict mode and web workers),\n  // otherwise `this` in Node and other environments\n  (typeof self !== 'undefined') ? self : this,\n  [],     // pool: entropy pool starts empty\n  Math    // math: package containing random, pow, and seedrandom\n);\n","// A library of seedable RNGs implemented in Javascript.\n//\n// Usage:\n//\n// var seedrandom = require('seedrandom');\n// var random = seedrandom(1); // or any seed.\n// var x = random();       // 0 <= x < 1.  Every bit is random.\n// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.\n\n// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.\n// Period: ~2^116\n// Reported to pass all BigCrush tests.\nvar alea = require('./lib/alea');\n\n// xor128, a pure xor-shift generator by George Marsaglia.\n// Period: 2^128-1.\n// Reported to fail: MatrixRank and LinearComp.\nvar xor128 = require('./lib/xor128');\n\n// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.\n// Period: 2^192-2^32\n// Reported to fail: CollisionOver, SimpPoker, and LinearComp.\nvar xorwow = require('./lib/xorwow');\n\n// xorshift7, by François Panneton and Pierre L'ecuyer, takes\n// a different approach: it adds robustness by allowing more shifts\n// than Marsaglia's original three.  It is a 7-shift generator\n// with 256 bits, that passes BigCrush with no systmatic failures.\n// Period 2^256-1.\n// No systematic BigCrush failures reported.\nvar xorshift7 = require('./lib/xorshift7');\n\n// xor4096, by Richard Brent, is a 4096-bit xor-shift with a\n// very long period that also adds a Weyl generator. It also passes\n// BigCrush with no systematic failures.  Its long period may\n// be useful if you have many generators and need to avoid\n// collisions.\n// Period: 2^4128-2^32.\n// No systematic BigCrush failures reported.\nvar xor4096 = require('./lib/xor4096');\n\n// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random\n// number generator derived from ChaCha, a modern stream cipher.\n// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf\n// Period: ~2^127\n// No systematic BigCrush failures reported.\nvar tychei = require('./lib/tychei');\n\n// The original ARC4-based prng included in this library.\n// Period: ~2^1600\nvar sr = require('./seedrandom');\n\nsr.alea = alea;\nsr.xor128 = xor128;\nsr.xorwow = xorwow;\nsr.xorshift7 = xorshift7;\nsr.xor4096 = xor4096;\nsr.tychei = tychei;\n\nmodule.exports = sr;\n","var seedrandom = require('seedrandom');\n\nvar wordList = [\n  // Borrowed from xkcd password generator which borrowed it from wherever\n  \"ability\",\"able\",\"aboard\",\"about\",\"above\",\"accept\",\"accident\",\"according\",\n  \"account\",\"accurate\",\"acres\",\"across\",\"act\",\"action\",\"active\",\"activity\",\n  \"actual\",\"actually\",\"add\",\"addition\",\"additional\",\"adjective\",\"adult\",\"adventure\",\n  \"advice\",\"affect\",\"afraid\",\"after\",\"afternoon\",\"again\",\"against\",\"age\",\n  \"ago\",\"agree\",\"ahead\",\"aid\",\"air\",\"airplane\",\"alike\",\"alive\",\n  \"all\",\"allow\",\"almost\",\"alone\",\"along\",\"aloud\",\"alphabet\",\"already\",\n  \"also\",\"although\",\"am\",\"among\",\"amount\",\"ancient\",\"angle\",\"angry\",\n  \"animal\",\"announced\",\"another\",\"answer\",\"ants\",\"any\",\"anybody\",\"anyone\",\n  \"anything\",\"anyway\",\"anywhere\",\"apart\",\"apartment\",\"appearance\",\"apple\",\"applied\",\n  \"appropriate\",\"are\",\"area\",\"arm\",\"army\",\"around\",\"arrange\",\"arrangement\",\n  \"arrive\",\"arrow\",\"art\",\"article\",\"as\",\"aside\",\"ask\",\"asleep\",\n  \"at\",\"ate\",\"atmosphere\",\"atom\",\"atomic\",\"attached\",\"attack\",\"attempt\",\n  \"attention\",\"audience\",\"author\",\"automobile\",\"available\",\"average\",\"avoid\",\"aware\",\n  \"away\",\"baby\",\"back\",\"bad\",\"badly\",\"bag\",\"balance\",\"ball\",\n  \"balloon\",\"band\",\"bank\",\"bar\",\"bare\",\"bark\",\"barn\",\"base\",\n  \"baseball\",\"basic\",\"basis\",\"basket\",\"bat\",\"battle\",\"be\",\"bean\",\n  \"bear\",\"beat\",\"beautiful\",\"beauty\",\"became\",\"because\",\"become\",\"becoming\",\n  \"bee\",\"been\",\"before\",\"began\",\"beginning\",\"begun\",\"behavior\",\"behind\",\n  \"being\",\"believed\",\"bell\",\"belong\",\"below\",\"belt\",\"bend\",\"beneath\",\n  \"bent\",\"beside\",\"best\",\"bet\",\"better\",\"between\",\"beyond\",\"bicycle\",\n  \"bigger\",\"biggest\",\"bill\",\"birds\",\"birth\",\"birthday\",\"bit\",\"bite\",\n  \"black\",\"blank\",\"blanket\",\"blew\",\"blind\",\"block\",\"blood\",\"blow\",\n  \"blue\",\"board\",\"boat\",\"body\",\"bone\",\"book\",\"border\",\"born\",\n  \"both\",\"bottle\",\"bottom\",\"bound\",\"bow\",\"bowl\",\"box\",\"boy\",\n  \"brain\",\"branch\",\"brass\",\"brave\",\"bread\",\"break\",\"breakfast\",\"breath\",\n  \"breathe\",\"breathing\",\"breeze\",\"brick\",\"bridge\",\"brief\",\"bright\",\"bring\",\n  \"broad\",\"broke\",\"broken\",\"brother\",\"brought\",\"brown\",\"brush\",\"buffalo\",\n  \"build\",\"building\",\"built\",\"buried\",\"burn\",\"burst\",\"bus\",\"bush\",\n  \"business\",\"busy\",\"but\",\"butter\",\"buy\",\"by\",\"cabin\",\"cage\",\n  \"cake\",\"call\",\"calm\",\"came\",\"camera\",\"camp\",\"can\",\"canal\",\n  \"cannot\",\"cap\",\"capital\",\"captain\",\"captured\",\"car\",\"carbon\",\"card\",\n  \"care\",\"careful\",\"carefully\",\"carried\",\"carry\",\"case\",\"cast\",\"castle\",\n  \"cat\",\"catch\",\"cattle\",\"caught\",\"cause\",\"cave\",\"cell\",\"cent\",\n  \"center\",\"central\",\"century\",\"certain\",\"certainly\",\"chain\",\"chair\",\"chamber\",\n  \"chance\",\"change\",\"changing\",\"chapter\",\"character\",\"characteristic\",\"charge\",\"chart\",\n  \"check\",\"cheese\",\"chemical\",\"chest\",\"chicken\",\"chief\",\"child\",\"children\",\n  \"choice\",\"choose\",\"chose\",\"chosen\",\"church\",\"circle\",\"circus\",\"citizen\",\n  \"city\",\"class\",\"classroom\",\"claws\",\"clay\",\"clean\",\"clear\",\"clearly\",\n  \"climate\",\"climb\",\"clock\",\"close\",\"closely\",\"closer\",\"cloth\",\"clothes\",\n  \"clothing\",\"cloud\",\"club\",\"coach\",\"coal\",\"coast\",\"coat\",\"coffee\",\n  \"cold\",\"collect\",\"college\",\"colony\",\"color\",\"column\",\"combination\",\"combine\",\n  \"come\",\"comfortable\",\"coming\",\"command\",\"common\",\"community\",\"company\",\"compare\",\n  \"compass\",\"complete\",\"completely\",\"complex\",\"composed\",\"composition\",\"compound\",\"concerned\",\n  \"condition\",\"congress\",\"connected\",\"consider\",\"consist\",\"consonant\",\"constantly\",\"construction\",\n  \"contain\",\"continent\",\"continued\",\"contrast\",\"control\",\"conversation\",\"cook\",\"cookies\",\n  \"cool\",\"copper\",\"copy\",\"corn\",\"corner\",\"correct\",\"correctly\",\"cost\",\n  \"cotton\",\"could\",\"count\",\"country\",\"couple\",\"courage\",\"course\",\"court\",\n  \"cover\",\"cow\",\"cowboy\",\"crack\",\"cream\",\"create\",\"creature\",\"crew\",\n  \"crop\",\"cross\",\"crowd\",\"cry\",\"cup\",\"curious\",\"current\",\"curve\",\n  \"customs\",\"cut\",\"cutting\",\"daily\",\"damage\",\"dance\",\"danger\",\"dangerous\",\n  \"dark\",\"darkness\",\"date\",\"daughter\",\"dawn\",\"day\",\"dead\",\"deal\",\n  \"dear\",\"death\",\"decide\",\"declared\",\"deep\",\"deeply\",\"deer\",\"definition\",\n  \"degree\",\"depend\",\"depth\",\"describe\",\"desert\",\"design\",\"desk\",\"detail\",\n  \"determine\",\"develop\",\"development\",\"diagram\",\"diameter\",\"did\",\"die\",\"differ\",\n  \"difference\",\"different\",\"difficult\",\"difficulty\",\"dig\",\"dinner\",\"direct\",\"direction\",\n  \"directly\",\"dirt\",\"dirty\",\"disappear\",\"discover\",\"discovery\",\"discuss\",\"discussion\",\n  \"disease\",\"dish\",\"distance\",\"distant\",\"divide\",\"division\",\"do\",\"doctor\",\n  \"does\",\"dog\",\"doing\",\"doll\",\"dollar\",\"done\",\"donkey\",\"door\",\n  \"dot\",\"double\",\"doubt\",\"down\",\"dozen\",\"draw\",\"drawn\",\"dream\",\n  \"dress\",\"drew\",\"dried\",\"drink\",\"drive\",\"driven\",\"driver\",\"driving\",\n  \"drop\",\"dropped\",\"drove\",\"dry\",\"duck\",\"due\",\"dug\",\"dull\",\n  \"during\",\"dust\",\"duty\",\"each\",\"eager\",\"ear\",\"earlier\",\"early\",\n  \"earn\",\"earth\",\"easier\",\"easily\",\"east\",\"easy\",\"eat\",\"eaten\",\n  \"edge\",\"education\",\"effect\",\"effort\",\"egg\",\"eight\",\"either\",\"electric\",\n  \"electricity\",\"element\",\"elephant\",\"eleven\",\"else\",\"empty\",\"end\",\"enemy\",\n  \"energy\",\"engine\",\"engineer\",\"enjoy\",\"enough\",\"enter\",\"entire\",\"entirely\",\n  \"environment\",\"equal\",\"equally\",\"equator\",\"equipment\",\"escape\",\"especially\",\"essential\",\n  \"establish\",\"even\",\"evening\",\"event\",\"eventually\",\"ever\",\"every\",\"everybody\",\n  \"everyone\",\"everything\",\"everywhere\",\"evidence\",\"exact\",\"exactly\",\"examine\",\"example\",\n  \"excellent\",\"except\",\"exchange\",\"excited\",\"excitement\",\"exciting\",\"exclaimed\",\"exercise\",\n  \"exist\",\"expect\",\"experience\",\"experiment\",\"explain\",\"explanation\",\"explore\",\"express\",\n  \"expression\",\"extra\",\"eye\",\"face\",\"facing\",\"fact\",\"factor\",\"factory\",\n  \"failed\",\"fair\",\"fairly\",\"fall\",\"fallen\",\"familiar\",\"family\",\"famous\",\n  \"far\",\"farm\",\"farmer\",\"farther\",\"fast\",\"fastened\",\"faster\",\"fat\",\n  \"father\",\"favorite\",\"fear\",\"feathers\",\"feature\",\"fed\",\"feed\",\"feel\",\n  \"feet\",\"fell\",\"fellow\",\"felt\",\"fence\",\"few\",\"fewer\",\"field\",\n  \"fierce\",\"fifteen\",\"fifth\",\"fifty\",\"fight\",\"fighting\",\"figure\",\"fill\",\n  \"film\",\"final\",\"finally\",\"find\",\"fine\",\"finest\",\"finger\",\"finish\",\n  \"fire\",\"fireplace\",\"firm\",\"first\",\"fish\",\"five\",\"fix\",\"flag\",\n  \"flame\",\"flat\",\"flew\",\"flies\",\"flight\",\"floating\",\"floor\",\"flow\",\n  \"flower\",\"fly\",\"fog\",\"folks\",\"follow\",\"food\",\"foot\",\"football\",\n  \"for\",\"force\",\"foreign\",\"forest\",\"forget\",\"forgot\",\"forgotten\",\"form\",\n  \"former\",\"fort\",\"forth\",\"forty\",\"forward\",\"fought\",\"found\",\"four\",\n  \"fourth\",\"fox\",\"frame\",\"free\",\"freedom\",\"frequently\",\"fresh\",\"friend\",\n  \"friendly\",\"frighten\",\"frog\",\"from\",\"front\",\"frozen\",\"fruit\",\"fuel\",\n  \"full\",\"fully\",\"fun\",\"function\",\"funny\",\"fur\",\"furniture\",\"further\",\n  \"future\",\"gain\",\"game\",\"garage\",\"garden\",\"gas\",\"gasoline\",\"gate\",\n  \"gather\",\"gave\",\"general\",\"generally\",\"gentle\",\"gently\",\"get\",\"getting\",\n  \"giant\",\"gift\",\"girl\",\"give\",\"given\",\"giving\",\"glad\",\"glass\",\n  \"globe\",\"go\",\"goes\",\"gold\",\"golden\",\"gone\",\"good\",\"goose\",\n  \"got\",\"government\",\"grabbed\",\"grade\",\"gradually\",\"grain\",\"grandfather\",\"grandmother\",\n  \"graph\",\"grass\",\"gravity\",\"gray\",\"great\",\"greater\",\"greatest\",\"greatly\",\n  \"green\",\"grew\",\"ground\",\"group\",\"grow\",\"grown\",\"growth\",\"guard\",\n  \"guess\",\"guide\",\"gulf\",\"gun\",\"habit\",\"had\",\"hair\",\"half\",\n  \"halfway\",\"hall\",\"hand\",\"handle\",\"handsome\",\"hang\",\"happen\",\"happened\",\n  \"happily\",\"happy\",\"harbor\",\"hard\",\"harder\",\"hardly\",\"has\",\"hat\",\n  \"have\",\"having\",\"hay\",\"he\",\"headed\",\"heading\",\"health\",\"heard\",\n  \"hearing\",\"heart\",\"heat\",\"heavy\",\"height\",\"held\",\"hello\",\"help\",\n  \"helpful\",\"her\",\"herd\",\"here\",\"herself\",\"hidden\",\"hide\",\"high\",\n  \"higher\",\"highest\",\"highway\",\"hill\",\"him\",\"himself\",\"his\",\"history\",\n  \"hit\",\"hold\",\"hole\",\"hollow\",\"home\",\"honor\",\"hope\",\"horn\",\n  \"horse\",\"hospital\",\"hot\",\"hour\",\"house\",\"how\",\"however\",\"huge\",\n  \"human\",\"hundred\",\"hung\",\"hungry\",\"hunt\",\"hunter\",\"hurried\",\"hurry\",\n  \"hurt\",\"husband\",\"ice\",\"idea\",\"identity\",\"if\",\"ill\",\"image\",\n  \"imagine\",\"immediately\",\"importance\",\"important\",\"impossible\",\"improve\",\"in\",\"inch\",\n  \"include\",\"including\",\"income\",\"increase\",\"indeed\",\"independent\",\"indicate\",\"individual\",\n  \"industrial\",\"industry\",\"influence\",\"information\",\"inside\",\"instance\",\"instant\",\"instead\",\n  \"instrument\",\"interest\",\"interior\",\"into\",\"introduced\",\"invented\",\"involved\",\"iron\",\n  \"is\",\"island\",\"it\",\"its\",\"itself\",\"jack\",\"jar\",\"jet\",\n  \"job\",\"join\",\"joined\",\"journey\",\"joy\",\"judge\",\"jump\",\"jungle\",\n  \"just\",\"keep\",\"kept\",\"key\",\"kids\",\"kill\",\"kind\",\"kitchen\",\n  \"knew\",\"knife\",\"know\",\"knowledge\",\"known\",\"label\",\"labor\",\"lack\",\n  \"lady\",\"laid\",\"lake\",\"lamp\",\"land\",\"language\",\"large\",\"larger\",\n  \"largest\",\"last\",\"late\",\"later\",\"laugh\",\"law\",\"lay\",\"layers\",\n  \"lead\",\"leader\",\"leaf\",\"learn\",\"least\",\"leather\",\"leave\",\"leaving\",\n  \"led\",\"left\",\"leg\",\"length\",\"lesson\",\"let\",\"letter\",\"level\",\n  \"library\",\"lie\",\"life\",\"lift\",\"light\",\"like\",\"likely\",\"limited\",\n  \"line\",\"lion\",\"lips\",\"liquid\",\"list\",\"listen\",\"little\",\"live\",\n  \"living\",\"load\",\"local\",\"locate\",\"location\",\"log\",\"lonely\",\"long\",\n  \"longer\",\"look\",\"loose\",\"lose\",\"loss\",\"lost\",\"lot\",\"loud\",\n  \"love\",\"lovely\",\"low\",\"lower\",\"luck\",\"lucky\",\"lunch\",\"lungs\",\n  \"lying\",\"machine\",\"machinery\",\"mad\",\"made\",\"magic\",\"magnet\",\"mail\",\n  \"main\",\"mainly\",\"major\",\"make\",\"making\",\"man\",\"managed\",\"manner\",\n  \"manufacturing\",\"many\",\"map\",\"mark\",\"market\",\"married\",\"mass\",\"massage\",\n  \"master\",\"material\",\"mathematics\",\"matter\",\"may\",\"maybe\",\"me\",\"meal\",\n  \"mean\",\"means\",\"meant\",\"measure\",\"meat\",\"medicine\",\"meet\",\"melted\",\n  \"member\",\"memory\",\"men\",\"mental\",\"merely\",\"met\",\"metal\",\"method\",\n  \"mice\",\"middle\",\"might\",\"mighty\",\"mile\",\"military\",\"milk\",\"mill\",\n  \"mind\",\"mine\",\"minerals\",\"minute\",\"mirror\",\"missing\",\"mission\",\"mistake\",\n  \"mix\",\"mixture\",\"model\",\"modern\",\"molecular\",\"moment\",\"money\",\"monkey\",\n  \"month\",\"mood\",\"moon\",\"more\",\"morning\",\"most\",\"mostly\",\"mother\",\n  \"motion\",\"motor\",\"mountain\",\"mouse\",\"mouth\",\"move\",\"movement\",\"movie\",\n  \"moving\",\"mud\",\"muscle\",\"music\",\"musical\",\"must\",\"my\",\"myself\",\n  \"mysterious\",\"nails\",\"name\",\"nation\",\"national\",\"native\",\"natural\",\"naturally\",\n  \"nature\",\"near\",\"nearby\",\"nearer\",\"nearest\",\"nearly\",\"necessary\",\"neck\",\n  \"needed\",\"needle\",\"needs\",\"negative\",\"neighbor\",\"neighborhood\",\"nervous\",\"nest\",\n  \"never\",\"new\",\"news\",\"newspaper\",\"next\",\"nice\",\"night\",\"nine\",\n  \"no\",\"nobody\",\"nodded\",\"noise\",\"none\",\"noon\",\"nor\",\"north\",\n  \"nose\",\"not\",\"note\",\"noted\",\"nothing\",\"notice\",\"noun\",\"now\",\n  \"number\",\"numeral\",\"nuts\",\"object\",\"observe\",\"obtain\",\"occasionally\",\"occur\",\n  \"ocean\",\"of\",\"off\",\"offer\",\"office\",\"officer\",\"official\",\"oil\",\n  \"old\",\"older\",\"oldest\",\"on\",\"once\",\"one\",\"only\",\"onto\",\n  \"open\",\"operation\",\"opinion\",\"opportunity\",\"opposite\",\"or\",\"orange\",\"orbit\",\n  \"order\",\"ordinary\",\"organization\",\"organized\",\"origin\",\"original\",\"other\",\"ought\",\n  \"our\",\"ourselves\",\"out\",\"outer\",\"outline\",\"outside\",\"over\",\"own\",\n  \"owner\",\"oxygen\",\"pack\",\"package\",\"page\",\"paid\",\"pain\",\"paint\",\n  \"pair\",\"palace\",\"pale\",\"pan\",\"paper\",\"paragraph\",\"parallel\",\"parent\",\n  \"park\",\"part\",\"particles\",\"particular\",\"particularly\",\"partly\",\"parts\",\"party\",\n  \"pass\",\"passage\",\"past\",\"path\",\"pattern\",\"pay\",\"peace\",\"pen\",\n  \"pencil\",\"people\",\"per\",\"percent\",\"perfect\",\"perfectly\",\"perhaps\",\"period\",\n  \"person\",\"personal\",\"pet\",\"phrase\",\"physical\",\"piano\",\"pick\",\"picture\",\n  \"pictured\",\"pie\",\"piece\",\"pig\",\"pile\",\"pilot\",\"pine\",\"pink\",\n  \"pipe\",\"pitch\",\"place\",\"plain\",\"plan\",\"plane\",\"planet\",\"planned\",\n  \"planning\",\"plant\",\"plastic\",\"plate\",\"plates\",\"play\",\"pleasant\",\"please\",\n  \"pleasure\",\"plenty\",\"plural\",\"plus\",\"pocket\",\"poem\",\"poet\",\"poetry\",\n  \"point\",\"pole\",\"police\",\"policeman\",\"political\",\"pond\",\"pony\",\"pool\",\n  \"poor\",\"popular\",\"population\",\"porch\",\"port\",\"position\",\"positive\",\"possible\",\n  \"possibly\",\"post\",\"pot\",\"potatoes\",\"pound\",\"pour\",\"powder\",\"power\",\n  \"powerful\",\"practical\",\"practice\",\"prepare\",\"present\",\"president\",\"press\",\"pressure\",\n  \"pretty\",\"prevent\",\"previous\",\"price\",\"pride\",\"primitive\",\"principal\",\"principle\",\n  \"printed\",\"private\",\"prize\",\"probably\",\"problem\",\"process\",\"produce\",\"product\",\n  \"production\",\"program\",\"progress\",\"promised\",\"proper\",\"properly\",\"property\",\"protection\",\n  \"proud\",\"prove\",\"provide\",\"public\",\"pull\",\"pupil\",\"pure\",\"purple\",\n  \"purpose\",\"push\",\"put\",\"putting\",\"quarter\",\"queen\",\"question\",\"quick\",\n  \"quickly\",\"quiet\",\"quietly\",\"quite\",\"rabbit\",\"race\",\"radio\",\"railroad\",\n  \"rain\",\"raise\",\"ran\",\"ranch\",\"range\",\"rapidly\",\"rate\",\"rather\",\n  \"raw\",\"rays\",\"reach\",\"read\",\"reader\",\"ready\",\"real\",\"realize\",\n  \"rear\",\"reason\",\"recall\",\"receive\",\"recent\",\"recently\",\"recognize\",\"record\",\n  \"red\",\"refer\",\"refused\",\"region\",\"regular\",\"related\",\"relationship\",\"religious\",\n  \"remain\",\"remarkable\",\"remember\",\"remove\",\"repeat\",\"replace\",\"replied\",\"report\",\n  \"represent\",\"require\",\"research\",\"respect\",\"rest\",\"result\",\"return\",\"review\",\n  \"rhyme\",\"rhythm\",\"rice\",\"rich\",\"ride\",\"riding\",\"right\",\"ring\",\n  \"rise\",\"rising\",\"river\",\"road\",\"roar\",\"rock\",\"rocket\",\"rocky\",\n  \"rod\",\"roll\",\"roof\",\"room\",\"root\",\"rope\",\"rose\",\"rough\",\n  \"round\",\"route\",\"row\",\"rubbed\",\"rubber\",\"rule\",\"ruler\",\"run\",\n  \"running\",\"rush\",\"sad\",\"saddle\",\"safe\",\"safety\",\"said\",\"sail\",\n  \"sale\",\"salmon\",\"salt\",\"same\",\"sand\",\"sang\",\"sat\",\"satellites\",\n  \"satisfied\",\"save\",\"saved\",\"saw\",\"say\",\"scale\",\"scared\",\"scene\",\n  \"school\",\"science\",\"scientific\",\"scientist\",\"score\",\"screen\",\"sea\",\"search\",\n  \"season\",\"seat\",\"second\",\"secret\",\"section\",\"see\",\"seed\",\"seeing\",\n  \"seems\",\"seen\",\"seldom\",\"select\",\"selection\",\"sell\",\"send\",\"sense\",\n  \"sent\",\"sentence\",\"separate\",\"series\",\"serious\",\"serve\",\"service\",\"sets\",\n  \"setting\",\"settle\",\"settlers\",\"seven\",\"several\",\"shade\",\"shadow\",\"shake\",\n  \"shaking\",\"shall\",\"shallow\",\"shape\",\"share\",\"sharp\",\"she\",\"sheep\",\n  \"sheet\",\"shelf\",\"shells\",\"shelter\",\"shine\",\"shinning\",\"ship\",\"shirt\",\n  \"shoe\",\"shoot\",\"shop\",\"shore\",\"short\",\"shorter\",\"shot\",\"should\",\n  \"shoulder\",\"shout\",\"show\",\"shown\",\"shut\",\"sick\",\"sides\",\"sight\",\n  \"sign\",\"signal\",\"silence\",\"silent\",\"silk\",\"silly\",\"silver\",\"similar\",\n  \"simple\",\"simplest\",\"simply\",\"since\",\"sing\",\"single\",\"sink\",\"sister\",\n  \"sit\",\"sitting\",\"situation\",\"six\",\"size\",\"skill\",\"skin\",\"sky\",\n  \"slabs\",\"slave\",\"sleep\",\"slept\",\"slide\",\"slight\",\"slightly\",\"slip\",\n  \"slipped\",\"slope\",\"slow\",\"slowly\",\"small\",\"smaller\",\"smallest\",\"smell\",\n  \"smile\",\"smoke\",\"smooth\",\"snake\",\"snow\",\"so\",\"soap\",\"social\",\n  \"society\",\"soft\",\"softly\",\"soil\",\"solar\",\"sold\",\"soldier\",\"solid\",\n  \"solution\",\"solve\",\"some\",\"somebody\",\"somehow\",\"someone\",\"something\",\"sometime\",\n  \"somewhere\",\"son\",\"song\",\"soon\",\"sort\",\"sound\",\"source\",\"south\",\n  \"southern\",\"space\",\"speak\",\"special\",\"species\",\"specific\",\"speech\",\"speed\",\n  \"spell\",\"spend\",\"spent\",\"spider\",\"spin\",\"spirit\",\"spite\",\"split\",\n  \"spoken\",\"sport\",\"spread\",\"spring\",\"square\",\"stage\",\"stairs\",\"stand\",\n  \"standard\",\"star\",\"stared\",\"start\",\"state\",\"statement\",\"station\",\"stay\",\n  \"steady\",\"steam\",\"steel\",\"steep\",\"stems\",\"step\",\"stepped\",\"stick\",\n  \"stiff\",\"still\",\"stock\",\"stomach\",\"stone\",\"stood\",\"stop\",\"stopped\",\n  \"store\",\"storm\",\"story\",\"stove\",\"straight\",\"strange\",\"stranger\",\"straw\",\n  \"stream\",\"street\",\"strength\",\"stretch\",\"strike\",\"string\",\"strip\",\"strong\",\n  \"stronger\",\"struck\",\"structure\",\"struggle\",\"stuck\",\"student\",\"studied\",\"studying\",\n  \"subject\",\"substance\",\"success\",\"successful\",\"such\",\"sudden\",\"suddenly\",\"sugar\",\n  \"suggest\",\"suit\",\"sum\",\"summer\",\"sun\",\"sunlight\",\"supper\",\"supply\",\n  \"support\",\"suppose\",\"sure\",\"surface\",\"surprise\",\"surrounded\",\"swam\",\"sweet\",\n  \"swept\",\"swim\",\"swimming\",\"swing\",\"swung\",\"syllable\",\"symbol\",\"system\",\n  \"table\",\"tail\",\"take\",\"taken\",\"tales\",\"talk\",\"tall\",\"tank\",\n  \"tape\",\"task\",\"taste\",\"taught\",\"tax\",\"tea\",\"teach\",\"teacher\",\n  \"team\",\"tears\",\"teeth\",\"telephone\",\"television\",\"tell\",\"temperature\",\"ten\",\n  \"tent\",\"term\",\"terrible\",\"test\",\"than\",\"thank\",\"that\",\"thee\",\n  \"them\",\"themselves\",\"then\",\"theory\",\"there\",\"therefore\",\"these\",\"they\",\n  \"thick\",\"thin\",\"thing\",\"think\",\"third\",\"thirty\",\"this\",\"those\",\n  \"thou\",\"though\",\"thought\",\"thousand\",\"thread\",\"three\",\"threw\",\"throat\",\n  \"through\",\"throughout\",\"throw\",\"thrown\",\"thumb\",\"thus\",\"thy\",\"tide\",\n  \"tie\",\"tight\",\"tightly\",\"till\",\"time\",\"tin\",\"tiny\",\"tip\",\n  \"tired\",\"title\",\"to\",\"tobacco\",\"today\",\"together\",\"told\",\"tomorrow\",\n  \"tone\",\"tongue\",\"tonight\",\"too\",\"took\",\"tool\",\"top\",\"topic\",\n  \"torn\",\"total\",\"touch\",\"toward\",\"tower\",\"town\",\"toy\",\"trace\",\n  \"track\",\"trade\",\"traffic\",\"trail\",\"train\",\"transportation\",\"trap\",\"travel\",\n  \"treated\",\"tree\",\"triangle\",\"tribe\",\"trick\",\"tried\",\"trip\",\"troops\",\n  \"tropical\",\"trouble\",\"truck\",\"trunk\",\"truth\",\"try\",\"tube\",\"tune\",\n  \"turn\",\"twelve\",\"twenty\",\"twice\",\"two\",\"type\",\"typical\",\"uncle\",\n  \"under\",\"underline\",\"understanding\",\"unhappy\",\"union\",\"unit\",\"universe\",\"unknown\",\n  \"unless\",\"until\",\"unusual\",\"up\",\"upon\",\"upper\",\"upward\",\"us\",\n  \"use\",\"useful\",\"using\",\"usual\",\"usually\",\"valley\",\"valuable\",\"value\",\n  \"vapor\",\"variety\",\"various\",\"vast\",\"vegetable\",\"verb\",\"vertical\",\"very\",\n  \"vessels\",\"victory\",\"view\",\"village\",\"visit\",\"visitor\",\"voice\",\"volume\",\n  \"vote\",\"vowel\",\"voyage\",\"wagon\",\"wait\",\"walk\",\"wall\",\"want\",\n  \"war\",\"warm\",\"warn\",\"was\",\"wash\",\"waste\",\"watch\",\"water\",\n  \"wave\",\"way\",\"we\",\"weak\",\"wealth\",\"wear\",\"weather\",\"week\",\n  \"weigh\",\"weight\",\"welcome\",\"well\",\"went\",\"were\",\"west\",\"western\",\n  \"wet\",\"whale\",\"what\",\"whatever\",\"wheat\",\"wheel\",\"when\",\"whenever\",\n  \"where\",\"wherever\",\"whether\",\"which\",\"while\",\"whispered\",\"whistle\",\"white\",\n  \"who\",\"whole\",\"whom\",\"whose\",\"why\",\"wide\",\"widely\",\"wife\",\n  \"wild\",\"will\",\"willing\",\"win\",\"wind\",\"window\",\"wing\",\"winter\",\n  \"wire\",\"wise\",\"wish\",\"with\",\"within\",\"without\",\"wolf\",\"women\",\n  \"won\",\"wonder\",\"wonderful\",\"wood\",\"wooden\",\"wool\",\"word\",\"wore\",\n  \"work\",\"worker\",\"world\",\"worried\",\"worry\",\"worse\",\"worth\",\"would\",\n  \"wrapped\",\"write\",\"writer\",\"writing\",\"written\",\"wrong\",\"wrote\",\"yard\",\n  \"year\",\"yellow\",\"yes\",\"yesterday\",\"yet\",\"you\",\"young\",\"younger\",\n  \"your\",\"yourself\",\"youth\",\"zero\",\"zebra\",\"zipper\",\"zoo\",\"zulu\"\n];\n\nfunction words(options) {\n  // initalize random number generator for words if options.seed is provided\n  const random = options?.seed ? new seedrandom(options.seed) : null;\n\n  function word() {\n    if (options && options.maxLength > 1) {\n      return generateWordWithMaxLength();\n    } else {\n      return generateRandomWord();\n    }\n  }\n\n  function generateWordWithMaxLength() {\n    var rightSize = false;\n    var wordUsed;\n    while (!rightSize) {  \n      wordUsed = generateRandomWord();\n      if(wordUsed.length <= options.maxLength) {\n        rightSize = true;\n      }\n\n    }\n    return wordUsed;\n  }\n\n  function generateRandomWord() {\n    return wordList[randInt(wordList.length)];\n  }\n\n  // random int as seeded by options.seed if applicable, or Math.random() otherwise\n  function randInt(lessThan) {\n    const r = random ? random() : Math.random();\n    return Math.floor(r * lessThan);\n  }\n\n  // No arguments = generate one word\n  if (typeof(options) === 'undefined') {\n    return word();\n  }\n\n  // Just a number = return that many words\n  if (typeof(options) === 'number') {\n    options = { exactly: options };\n  }\n\n  // options supported: exactly, min, max, join\n  if (options.exactly) {\n    options.min = options.exactly;\n    options.max = options.exactly;\n  }\n  \n  // not a number = one word par string\n  if (typeof(options.wordsPerString) !== 'number') {\n    options.wordsPerString = 1;\n  }\n\n  //not a function = returns the raw word\n  if (typeof(options.formatter) !== 'function') {\n    options.formatter = (word) => word;\n  }\n\n  //not a string = separator is a space\n  if (typeof(options.separator) !== 'string') {\n    options.separator = ' ';\n  }\n\n  var total = options.min + randInt(options.max + 1 - options.min);\n  var results = [];\n  var token = '';\n  var relativeIndex = 0;\n\n  for (var i = 0; (i < total * options.wordsPerString); i++) {\n    if (relativeIndex === options.wordsPerString - 1) {\n      token += options.formatter(word(), relativeIndex);\n    }\n    else {\n      token += options.formatter(word(), relativeIndex) + options.separator;\n    }\n    relativeIndex++;\n    if ((i + 1) % options.wordsPerString === 0) {\n      results.push(token);\n      token = ''; \n      relativeIndex = 0;\n    }\n   \n  }\n  if (typeof options.join === 'string') {\n    results = results.join(options.join);\n  }\n\n  return results;\n}\n\nmodule.exports = words;\n// Export the word list as it is often useful\nwords.wordList = wordList;\n","import { SetRequired } from \"type-fest\";\n\nimport { SimulationMode, SimulationOptions, TrialDescription, TrialResult } from \"../timeline\";\n\n/**\n * Parameter types for plugins\n */\nexport enum ParameterType {\n  BOOL,\n  STRING,\n  INT,\n  FLOAT,\n  FUNCTION,\n  KEY,\n  KEYS,\n  SELECT,\n  HTML_STRING,\n  IMAGE,\n  AUDIO,\n  VIDEO,\n  OBJECT,\n  COMPLEX,\n  TIMELINE,\n}\n\ntype ParameterTypeMap = {\n  [ParameterType.BOOL]: boolean;\n  [ParameterType.STRING]: string;\n  [ParameterType.INT]: number;\n  [ParameterType.FLOAT]: number;\n  [ParameterType.FUNCTION]: (...args: any[]) => any;\n  [ParameterType.KEY]: string;\n  [ParameterType.KEYS]: string[] | \"ALL_KEYS\" | \"NO_KEYS\";\n  [ParameterType.SELECT]: any;\n  [ParameterType.HTML_STRING]: string;\n  [ParameterType.IMAGE]: string;\n  [ParameterType.AUDIO]: string;\n  [ParameterType.VIDEO]: string;\n  [ParameterType.OBJECT]: object;\n  [ParameterType.COMPLEX]: any;\n  [ParameterType.TIMELINE]: any;\n};\n\ntype PreloadParameterType = ParameterType.AUDIO | ParameterType.VIDEO | ParameterType.IMAGE;\n\nexport type ParameterInfo = (\n  | { type: Exclude<ParameterType, ParameterType.COMPLEX | PreloadParameterType> }\n  | { type: ParameterType.COMPLEX; nested?: ParameterInfos }\n  | { type: PreloadParameterType; preload?: boolean }\n) & {\n  array?: boolean;\n  pretty_name?: string;\n  default?: any;\n};\n\nexport type ParameterInfos = Record<string, ParameterInfo>;\n\ntype InferredParameter<I extends ParameterInfo> = I[\"array\"] extends true\n  ? Array<ParameterTypeMap[I[\"type\"]]>\n  : ParameterTypeMap[I[\"type\"]];\n\ntype RequiredParameterNames<I extends ParameterInfos> = {\n  [K in keyof I]: I[K][\"default\"] extends undefined ? K : never;\n}[keyof I];\n\ntype InferredParameters<I extends ParameterInfos> = SetRequired<\n  {\n    [Property in keyof I]?: InferredParameter<I[Property]>;\n  },\n  RequiredParameterNames<I>\n>;\n\nexport const universalPluginParameters = <const>{\n  /**\n   * Data to add to this trial (key-value pairs)\n   */\n  data: {\n    type: ParameterType.OBJECT,\n    pretty_name: \"Data\",\n    default: {},\n  },\n  /**\n   * Function to execute when trial begins\n   */\n  on_start: {\n    type: ParameterType.FUNCTION,\n    pretty_name: \"On start\",\n    default: function () {\n      return;\n    },\n  },\n  /**\n   * Function to execute when trial is finished\n   */\n  on_finish: {\n    type: ParameterType.FUNCTION,\n    pretty_name: \"On finish\",\n    default: function () {\n      return;\n    },\n  },\n  /**\n   * Function to execute after the trial has loaded\n   */\n  on_load: {\n    type: ParameterType.FUNCTION,\n    pretty_name: \"On load\",\n    default: function () {\n      return;\n    },\n  },\n  /**\n   * Length of gap between the end of this trial and the start of the next trial\n   */\n  post_trial_gap: {\n    type: ParameterType.INT,\n    pretty_name: \"Post trial gap\",\n    default: 0,\n  },\n  /**\n   * A list of CSS classes to add to the jsPsych display element for the duration of this trial\n   */\n  css_classes: {\n    type: ParameterType.STRING,\n    pretty_name: \"Custom CSS classes\",\n    default: \"\",\n  },\n  /**\n   * Options to control simulation mode for the trial.\n   */\n  simulation_options: {\n    type: ParameterType.COMPLEX,\n    default: {},\n  },\n};\n\nexport type UniversalPluginParameters = InferredParameters<typeof universalPluginParameters>;\n\nexport interface PluginInfo {\n  name: string;\n  version?: string;\n  parameters: ParameterInfos;\n  data?: ParameterInfos;\n  citations?: Record<string, string> | string;\n}\n\nexport interface JsPsychPlugin<I extends PluginInfo> {\n  trial(\n    display_element: HTMLElement,\n    trial: TrialType<I>,\n    on_load?: () => void\n  ): void | Promise<TrialResult | void>;\n\n  simulate?(\n    trial: TrialType<I>,\n    simulation_mode: SimulationMode,\n    simulation_options: SimulationOptions,\n    on_load?: () => void\n  ): void | Promise<TrialResult | void>;\n}\n\nexport type TrialType<I extends PluginInfo> = InferredParameters<I[\"parameters\"]> &\n  TrialDescription;\n\nexport type PluginParameters<I extends PluginInfo> = InferredParameters<I[\"parameters\"]>;\n","import { ParameterType } from \"../../modules/plugins\";\nimport { unique } from \"../utils\";\nimport { AudioPlayer } from \"./AudioPlayer\";\n\nconst preloadParameterTypes = <const>[\n  ParameterType.AUDIO,\n  ParameterType.IMAGE,\n  ParameterType.VIDEO,\n];\ntype PreloadType = typeof preloadParameterTypes[number];\n\nexport class MediaAPI {\n  constructor(public useWebaudio: boolean) {\n    if (\n      this.useWebaudio &&\n      typeof window !== \"undefined\" &&\n      typeof window.AudioContext !== \"undefined\"\n    ) {\n      this.context = new AudioContext();\n    }\n  }\n\n  // video //\n  private video_buffers = {};\n  getVideoBuffer(videoID: string) {\n    if (videoID.startsWith(\"blob:\")) {\n      this.video_buffers[videoID] = videoID;\n    }\n    return this.video_buffers[videoID];\n  }\n\n  // audio //\n  private context: AudioContext = null;\n  private audio_buffers = [];\n\n  audioContext(): AudioContext {\n    if (this.context && this.context.state !== \"running\") {\n      this.context.resume();\n    }\n    return this.context;\n  }\n\n  async getAudioPlayer(audioID: string): Promise<AudioPlayer> {\n    if (this.audio_buffers[audioID] instanceof AudioPlayer) {\n      return this.audio_buffers[audioID];\n    } else {\n      this.audio_buffers[audioID] = new AudioPlayer(audioID, {\n        useWebAudio: this.useWebaudio,\n        audioContext: this.context,\n      });\n      await this.audio_buffers[audioID].load();\n      return this.audio_buffers[audioID];\n    }\n  }\n\n  // preloading stimuli //\n  private preload_requests = [];\n\n  private img_cache = {};\n\n  preloadAudio(\n    files,\n    callback_complete = () => {},\n    callback_load = (filepath: string) => {},\n    callback_error = (error) => {}\n  ) {\n    files = unique(files.flat());\n\n    let n_loaded = 0;\n\n    if (files.length == 0) {\n      callback_complete();\n      return;\n    }\n\n    for (const file of files) {\n      // check if file was already loaded\n      if (this.audio_buffers[file] instanceof AudioPlayer) {\n        n_loaded++;\n        callback_load(file);\n        if (n_loaded == files.length) {\n          callback_complete();\n        }\n      } else {\n        this.audio_buffers[file] = new AudioPlayer(file, {\n          useWebAudio: this.useWebaudio,\n          audioContext: this.context,\n        });\n        this.audio_buffers[file]\n          .load()\n          .then(() => {\n            n_loaded++;\n            callback_load(file);\n            if (n_loaded == files.length) {\n              callback_complete();\n            }\n          })\n          .catch((e) => {\n            callback_error(e);\n          });\n      }\n    }\n  }\n\n  preloadImages(\n    images,\n    callback_complete = () => {},\n    callback_load = (filepath) => {},\n    callback_error = (error_msg) => {}\n  ) {\n    // flatten the images array\n    images = unique(images.flat());\n\n    var n_loaded = 0;\n\n    if (images.length === 0) {\n      callback_complete();\n      return;\n    }\n\n    for (let i = 0; i < images.length; i++) {\n      const img = new Image();\n      const src = images[i];\n      img.onload = () => {\n        n_loaded++;\n        callback_load(src);\n        if (n_loaded === images.length) {\n          callback_complete();\n        }\n      };\n\n      img.onerror = (e) => {\n        callback_error({ source: src, error: e });\n      };\n\n      img.src = src;\n\n      this.img_cache[src] = img;\n      this.preload_requests.push(img);\n    }\n  }\n\n  preloadVideo(\n    videos,\n    callback_complete = () => {},\n    callback_load = (filepath) => {},\n    callback_error = (error_msg) => {}\n  ) {\n    // flatten the video array\n    videos = unique(videos.flat());\n\n    let n_loaded = 0;\n\n    if (videos.length === 0) {\n      callback_complete();\n      return;\n    }\n\n    for (const video of videos) {\n      const video_buffers = this.video_buffers;\n\n      //based on option 4 here: http://dinbror.dk/blog/how-to-preload-entire-html5-video-before-play-solved/\n      const request = new XMLHttpRequest();\n      request.open(\"GET\", video, true);\n      request.responseType = \"blob\";\n      request.onload = () => {\n        if (request.status === 200 || request.status === 0) {\n          const videoBlob = request.response;\n          video_buffers[video] = URL.createObjectURL(videoBlob); // IE10+\n          n_loaded++;\n          callback_load(video);\n          if (n_loaded === videos.length) {\n            callback_complete();\n          }\n        }\n      };\n      request.onerror = (e) => {\n        let err: ProgressEvent | string = e;\n        if (request.status == 404) {\n          err = \"404\";\n        }\n        callback_error({ source: video, error: err });\n      };\n      request.onloadend = (e) => {\n        if (request.status == 404) {\n          callback_error({ source: video, error: \"404\" });\n        }\n      };\n      request.send();\n      this.preload_requests.push(request);\n    }\n  }\n\n  private preloadMap = new Map<string, Record<string, PreloadType>>();\n\n  getAutoPreloadList(timeline_description: any[]) {\n    /** Map each preload parameter type to a set of paths to be preloaded */\n    const preloadPaths = Object.fromEntries(\n      preloadParameterTypes.map((type) => [type, new Set<string>()])\n    );\n\n    const traverseTimeline = (node, inheritedTrialType?) => {\n      const isTimeline = typeof node.timeline !== \"undefined\";\n\n      if (isTimeline) {\n        for (const childNode of node.timeline) {\n          traverseTimeline(childNode, node.type ?? inheritedTrialType);\n        }\n      } else if ((node.type ?? inheritedTrialType)?.info) {\n        // node is a trial with type.info set\n\n        // Get the plugin name and parameters object from the info object\n        const { name: pluginName, parameters } = (node.type ?? inheritedTrialType).info;\n\n        // Extract parameters to be preloaded and their types from parameter info if this has not\n        // yet been done for `pluginName`\n        if (!this.preloadMap.has(pluginName)) {\n          this.preloadMap.set(\n            pluginName,\n            Object.fromEntries(\n              Object.entries<any>(parameters)\n                // Filter out parameter entries with media types and a non-false `preload` option\n                .filter(\n                  ([_name, { type, preload }]) =>\n                    preloadParameterTypes.includes(type) && (preload ?? true)\n                )\n                // Map each entry's value to its parameter type\n                .map(([name, { type }]) => [name, type])\n            )\n          );\n        }\n\n        // Add preload paths from this trial\n        for (const [parameterName, parameterType] of Object.entries(\n          this.preloadMap.get(pluginName)\n        )) {\n          const parameterValue = node[parameterName];\n          const elements = preloadPaths[parameterType];\n\n          if (typeof parameterValue === \"string\") {\n            elements.add(parameterValue);\n          } else if (Array.isArray(parameterValue)) {\n            for (const element of parameterValue.flat()) {\n              if (typeof element === \"string\") {\n                elements.add(element);\n              }\n            }\n          }\n        }\n      }\n    };\n\n    traverseTimeline({ timeline: timeline_description });\n\n    return {\n      images: [...preloadPaths[ParameterType.IMAGE]],\n      audio: [...preloadPaths[ParameterType.AUDIO]],\n      video: [...preloadPaths[ParameterType.VIDEO]],\n    };\n  }\n\n  cancelPreloads() {\n    for (const request of this.preload_requests) {\n      request.onload = () => {};\n      request.onerror = () => {};\n      request.oncanplaythrough = () => {};\n      request.onabort = () => {};\n    }\n    this.preload_requests = [];\n  }\n\n  private microphone_recorder: MediaRecorder = null;\n\n  initializeMicrophoneRecorder(stream: MediaStream) {\n    const recorder = new MediaRecorder(stream);\n    this.microphone_recorder = recorder;\n  }\n\n  getMicrophoneRecorder(): MediaRecorder {\n    return this.microphone_recorder;\n  }\n\n  private camera_stream: MediaStream = null;\n  private camera_recorder: MediaRecorder = null;\n\n  initializeCameraRecorder(stream: MediaStream, opts?: MediaRecorderOptions) {\n    this.camera_stream = stream;\n    const recorder = new MediaRecorder(stream, opts);\n    this.camera_recorder = recorder;\n  }\n\n  getCameraStream(): MediaStream {\n    return this.camera_stream;\n  }\n\n  getCameraRecorder(): MediaRecorder {\n    return this.camera_recorder;\n  }\n}\n","export class MigrationError extends Error {\n  constructor(message = \"The global `jsPsych` variable is no longer available in jsPsych v7.\") {\n    super(\n      `${message} Please follow the migration guide at https://www.jspsych.org/7.0/support/migration-v7/ to update your experiment.`\n    );\n    this.name = \"MigrationError\";\n  }\n}\n\n// Define a global jsPsych object to handle invocations on it with migration errors\n(window as any).jsPsych = {\n  get init() {\n    throw new MigrationError(\"`jsPsych.init()` was replaced by `initJsPsych()` in jsPsych v7.\");\n  },\n\n  get data() {\n    throw new MigrationError();\n  },\n  get randomization() {\n    throw new MigrationError();\n  },\n  get turk() {\n    throw new MigrationError();\n  },\n  get pluginAPI() {\n    throw new MigrationError();\n  },\n\n  get ALL_KEYS() {\n    throw new MigrationError(\n      'jsPsych.ALL_KEYS was replaced by the \"ALL_KEYS\" string in jsPsych v7.'\n    );\n  },\n  get NO_KEYS() {\n    throw new MigrationError('jsPsych.NO_KEYS was replaced by the \"NO_KEYS\" string in jsPsych v7.');\n  },\n};\n","// __rollup-babel-import-regenerator-runtime__\n\nimport { JsPsych } from \"./JsPsych\";\nimport { MigrationError } from \"./migration\";\n\n// temporary patch for Safari\nif (\n  typeof window !== \"undefined\" &&\n  window.hasOwnProperty(\"webkitAudioContext\") &&\n  !window.hasOwnProperty(\"AudioContext\")\n) {\n  // @ts-expect-error\n  window.AudioContext = webkitAudioContext;\n}\n// end patch\n\n// The following function provides a uniform interface to initialize jsPsych, no matter whether a\n// browser supports ES6 classes or not (and whether the ES6 build or the Babel build is used).\n/**\n * Creates a new JsPsych instance using the provided options.\n *\n * @param options The options to pass to the JsPsych constructor\n * @returns A new JsPsych instance\n */\nexport function initJsPsych(options?) {\n  const jsPsych = new JsPsych(options);\n\n  // Handle invocations of non-existent v6 methods with migration errors\n  const migrationMessages = {\n    init: \"`jsPsych.init()` was replaced by `initJsPsych()` in jsPsych v7.\",\n\n    ALL_KEYS: 'jsPsych.ALL_KEYS was replaced by the \"ALL_KEYS\" string in jsPsych v7.',\n    NO_KEYS: 'jsPsych.NO_KEYS was replaced by the \"NO_KEYS\" string in jsPsych v7.',\n\n    // Getter functions that were renamed\n    currentTimelineNodeID:\n      \"`currentTimelineNodeID()` was renamed to `getCurrentTimelineNodeID()` in jsPsych v7.\",\n    progress: \"`progress()` was renamed to `getProgress()` in jsPsych v7.\",\n    startTime: \"`startTime()` was renamed to `getStartTime()` in jsPsych v7.\",\n    totalTime: \"`totalTime()` was renamed to `getTotalTime()` in jsPsych v7.\",\n    currentTrial: \"`currentTrial()` was renamed to `getCurrentTrial()` in jsPsych v7.\",\n    initSettings: \"`initSettings()` was renamed to `getInitSettings()` in jsPsych v7.\",\n    allTimelineVariables:\n      \"`allTimelineVariables()` was renamed to `getAllTimelineVariables()` in jsPsych v7.\",\n  };\n\n  Object.defineProperties(\n    jsPsych,\n    Object.fromEntries(\n      Object.entries(migrationMessages).map(([key, message]) => [\n        key,\n        {\n          get() {\n            throw new MigrationError(message);\n          },\n        },\n      ])\n    )\n  );\n\n  return jsPsych;\n}\n\nexport { JsPsych } from \"./JsPsych\";\nexport type { JsPsychPlugin, PluginInfo, TrialType } from \"./modules/plugins\";\nexport { ParameterType } from \"./modules/plugins\";\nexport type { JsPsychExtension, JsPsychExtensionInfo } from \"./modules/extensions\";\nexport { DataCollection } from \"./modules/data/DataCollection\";\n","{\n  \"name\": \"@jspsych/plugin-html-button-response\",\n  \"version\": \"2.1.0\",\n  \"description\": \"jsPsych plugin for displaying a stimulus and getting a button response\",\n  \"type\": \"module\",\n  \"main\": \"dist/index.cjs\",\n  \"exports\": {\n    \"import\": \"./dist/index.js\",\n    \"require\": \"./dist/index.cjs\"\n  },\n  \"typings\": \"dist/index.d.ts\",\n  \"unpkg\": \"dist/index.browser.min.js\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"test\": \"jest\",\n    \"test:watch\": \"npm test -- --watch\",\n    \"tsc\": \"tsc\",\n    \"build\": \"rollup --config\",\n    \"build:watch\": \"npm run build -- --watch\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/jspsych/jsPsych.git\",\n    \"directory\": \"packages/plugin-html-button-response\"\n  },\n  \"author\": \"Josh de Leeuw\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/jspsych/jsPsych/issues\"\n  },\n  \"homepage\": \"https://www.jspsych.org/latest/plugins/html-button-response\",\n  \"peerDependencies\": {\n    \"jspsych\": \">=7.1.0\"\n  },\n  \"devDependencies\": {\n    \"@jspsych/config\": \"^3.2.0\",\n    \"@jspsych/test-utils\": \"^1.2.0\"\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"html-button-response\",\n  version: version,\n  parameters: {\n    /** The HTML content to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /** Labels for the buttons. Each different string in the array will generate a different button. */\n    choices: {\n      type: ParameterType.STRING,\n      default: undefined,\n      array: true,\n    },\n    /**\n     * A function that generates the HTML for each button in the `choices` array. The function gets the string and index of the item in the `choices` array and should return valid HTML. If you want to use different markup for each button, you can do that by using a conditional on either parameter. The default parameter returns a button element with the text label of the choice.\n     */\n    button_html: {\n      type: ParameterType.FUNCTION,\n      default: function (choice: string, choice_index: number) {\n        return `<button class=\"jspsych-btn\">${choice}</button>`;\n      },\n    },\n    /** This string can contain HTML markup. Any content here will be displayed below the stimulus. The intention is that it can be used to provide a reminder about the action the participant is supposed to take (e.g., which key to press). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /** How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus will be set to `hidden` after this time has elapsed. If this is null, then the stimulus will remain visible until the trial ends. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** ow long to wait for the participant to make a response before ending the trial in milliseconds. If the participant fails to make a response before this timer is reached, the participant's response will be recorded as null for the trial and the trial will end. If the value of this parameter is null, the trial will wait for a response indefinitely.  */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** Setting to `'grid'` will make the container element have the CSS property `display: grid` and enable the use of `grid_rows` and `grid_columns`. Setting to `'flex'` will make the container element have the CSS property `display: flex`. You can customize how the buttons are laid out by adding inline CSS in the `button_html` parameter. */\n    button_layout: {\n      type: ParameterType.STRING,\n      default: \"grid\",\n    },\n    /**\n     * The number of rows in the button grid. Only applicable when `button_layout` is set to `'grid'`. If null, the number of rows will be determined automatically based on the number of buttons and the number of columns.\n     */\n    grid_rows: {\n      type: ParameterType.INT,\n      default: 1,\n    },\n    /**\n     * The number of columns in the button grid. Only applicable when `button_layout` is set to `'grid'`. If null, the number of columns will be determined automatically based on the number of buttons and the number of rows.\n     */\n    grid_columns: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /** If true, then the trial will end whenever the participant makes a response (assuming they make their response before the cutoff specified by the `trial_duration` parameter). If false, then the trial will continue until the value for `trial_duration` is reached. You can set this parameter to `false` to force the participant to view a stimulus for a fixed amount of time, even if they respond before the time is complete. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n    /** How long the button will delay enabling in milliseconds. */\n    enable_button_after: {\n      type: ParameterType.INT,\n      default: 0,\n    },\n  },\n  data: {\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** Indicates which button the participant pressed. The first button in the `choices` array is 0, the second is 1, and so on. */\n    response: {\n      type: ParameterType.INT,\n    },\n    /** The HTML content that was displayed on the screen. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n    },\n  },\n  // prettier-ignore\n  citations: '__CITATIONS__',\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays HTML content and records responses generated by button click. The stimulus can be displayed until a response is given, or for a pre-determined amount of time. The trial can be ended automatically if the participant has failed to respond within a fixed length of time. The button itself can be customized using HTML formatting.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/html-button-response/ html-button-response plugin documentation on jspsych.org}\n */\nclass HtmlButtonResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // Display stimulus\n    const stimulusElement = document.createElement(\"div\");\n    stimulusElement.id = \"jspsych-html-button-response-stimulus\";\n    stimulusElement.innerHTML = trial.stimulus;\n\n    display_element.appendChild(stimulusElement);\n\n    // Display buttons\n    const buttonGroupElement = document.createElement(\"div\");\n    buttonGroupElement.id = \"jspsych-html-button-response-btngroup\";\n    if (trial.button_layout === \"grid\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-grid\");\n      if (trial.grid_rows === null && trial.grid_columns === null) {\n        throw new Error(\n          \"You cannot set `grid_rows` to `null` without providing a value for `grid_columns`.\"\n        );\n      }\n      const n_cols =\n        trial.grid_columns === null\n          ? Math.ceil(trial.choices.length / trial.grid_rows)\n          : trial.grid_columns;\n      const n_rows =\n        trial.grid_rows === null\n          ? Math.ceil(trial.choices.length / trial.grid_columns)\n          : trial.grid_rows;\n      buttonGroupElement.style.gridTemplateColumns = `repeat(${n_cols}, 1fr)`;\n      buttonGroupElement.style.gridTemplateRows = `repeat(${n_rows}, 1fr)`;\n    } else if (trial.button_layout === \"flex\") {\n      buttonGroupElement.classList.add(\"jspsych-btn-group-flex\");\n    }\n\n    for (const [choiceIndex, choice] of trial.choices.entries()) {\n      buttonGroupElement.insertAdjacentHTML(\"beforeend\", trial.button_html(choice, choiceIndex));\n      const buttonElement = buttonGroupElement.lastChild as HTMLElement;\n      buttonElement.dataset.choice = choiceIndex.toString();\n      buttonElement.addEventListener(\"click\", () => {\n        after_response(choiceIndex);\n      });\n    }\n\n    display_element.appendChild(buttonGroupElement);\n\n    // Show prompt if there is one\n    if (trial.prompt !== null) {\n      display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n    }\n\n    // start time\n    var start_time = performance.now();\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.button,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      stimulusElement.classList.add(\"responded\");\n\n      // disable all the buttons after a response\n      for (const button of buttonGroupElement.children) {\n        button.setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        stimulusElement.style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // disable all the buttons and set a timeout that enables them after a specified delay if timing is set\n    if (trial.enable_button_after > 0) {\n      var btns = document.querySelectorAll(\"#jspsych-html-button-response-btngroup button\");\n      for (var i = 0; i < btns.length; i++) {\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        var btns = document.querySelectorAll(\"#jspsych-html-button-response-btngroup button\");\n        for (var i = 0; i < btns.length; i++) {\n          btns[i].removeAttribute(\"disabled\");\n        }\n      }, trial.enable_button_after);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt:\n        this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true) +\n        trial.enable_button_after,\n      response: this.jsPsych.randomization.randomInt(0, trial.choices.length - 1),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.clickTarget(\n        display_element.querySelector(\n          `#jspsych-html-button-response-btngroup [data-choice=\"${data.response}\"]`\n        ),\n        data.rt\n      );\n    }\n  }\n}\n\nexport default HtmlButtonResponsePlugin;\n","// The first SVG in every array represents the original object, while the second SVG represents a variation of that object.\r\n// This is useful bc you will either have the original object twice when is_same = true or original and variation when is_same = false.\r\n\r\nexport const test_categories = [\r\n  // Category 1: Color discrimination - Different objects with fill variations\r\n  {\r\n    \"smiley_face\": [\r\n      `<svg viewBox=\"0 0 293.246 293.246\">\r\n        <circle cx=\"146.623\" cy=\"100\" r=\"80\" fill=\"none\" stroke=\"#E67E22\" stroke-width=\"4\"/>\r\n        <circle cx=\"120\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <circle cx=\"173\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <path d=\"M130,110 Q146.623,125 163,110\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 293.246 293.246\">\r\n        <circle cx=\"146.623\" cy=\"100\" r=\"80\" fill=\"#FDBCB4\" stroke=\"#E67E22\" stroke-width=\"4\"/>\r\n        <circle cx=\"120\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <circle cx=\"173\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <path d=\"M130,110 Q146.623,125 163,110\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n      </svg>`\r\n    ],\r\n    \"heart_shape\": [\r\n      `<svg viewBox=\"0 0 471.701 471.701\">\r\n        <path d=\"M433.601,67.001c-24.7-24.7-57.4-38.2-92.3-38.2s-67.7,13.6-92.4,38.3l-12.9,12.9l-13.1-13.1c-24.7-24.7-57.6-38.4-92.5-38.4c-34.8,0-67.6,13.6-92.2,38.2c-24.7,24.7-38.3,57.5-38.2,92.4c0,34.9,13.7,67.6,38.4,92.3l187.8,187.8c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-3.9l188.2-187.5c24.7-24.7,38.3-57.5,38.3-92.4C471.801,124.501,458.301,91.701,433.601,67.001z\" fill=\"none\" stroke=\"#E74C3C\" stroke-width=\"8\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 471.701 471.701\">\r\n        <path d=\"M433.601,67.001c-24.7-24.7-57.4-38.2-92.3-38.2s-67.7,13.6-92.4,38.3l-12.9,12.9l-13.1-13.1c-24.7-24.7-57.6-38.4-92.5-38.4c-34.8,0-67.6,13.6-92.2,38.2c-24.7,24.7-38.3,57.5-38.2,92.4c0,34.9,13.7,67.6,38.4,92.3l187.8,187.8c2.6,2.6,6.1,4,9.5,4c3.4,0,6.9-1.3,9.5-3.9l188.2-187.5c24.7-24.7,38.3-57.5,38.3-92.4C471.801,124.501,458.301,91.701,433.601,67.001z\" fill=\"#E74C3C\"/>\r\n      </svg>`\r\n    ],\r\n    \"star_shape\": [\r\n      `<svg viewBox=\"0 0 33 33\">\r\n        <polygon points=\"27.865 31.83 17.615 26.209 7.462 32.009 9.553 20.362 0.99 12.335 12.532 10.758 17.394 0 22.436 10.672 34 12.047 25.574 20.22\" fill=\"none\" stroke=\"#FFD700\" stroke-width=\"2\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 33 33\">\r\n        <polygon points=\"27.865 31.83 17.615 26.209 7.462 32.009 9.553 20.362 0.99 12.335 12.532 10.758 17.394 0 22.436 10.672 34 12.047 25.574 20.22\" fill=\"#FFD700\"/>\r\n      </svg>`\r\n    ],\r\n    \"circle_shape\": [\r\n      `<svg viewBox=\"0 0 1024 1024\">\r\n        <circle cx=\"512\" cy=\"512\" r=\"256\" fill=\"none\" stroke=\"#2196F3\" stroke-width=\"32\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 1024 1024\">\r\n        <circle cx=\"512\" cy=\"512\" r=\"256\" fill=\"#2196F3\"/>\r\n      </svg>`\r\n    ]\r\n  },\r\n  // Category 2: Adding/taking elements - Objects where you can add/remove parts\r\n  {\r\n    \"tree_bare\": [\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <path d=\"M273.067,261.267H256h-17.067c0,0,8.533,230.4-59.733,230.4h153.6C264.533,491.667,273.067,261.267,273.067,261.267\" fill=\"#805333\"/>\r\n        <path d=\"M503.467,500.2H8.533c-4.71,0-8.533-3.814-8.533-8.533c0-4.719,3.823-8.533,8.533-8.533h494.933c4.71,0,8.533,3.814,8.533,8.533C512,496.386,508.177,500.2,503.467,500.2\" fill=\"#95A5A5\"/>\r\n        <path d=\"M418.133,184.467c0-32.99-26.743-59.733-59.733-59.733c-7.04,0-13.756,1.28-20.028,3.516c-5.265-19.635-17.323-36.489-33.545-47.838C306.364,75.547,307.2,70.367,307.2,65c0-28.279-22.921-51.2-51.2-51.2c-28.279,0-51.2,22.921-51.2,51.2c0,5.367,0.836,10.547,2.372,15.412c-16.222,11.349-28.28,28.203-33.545,47.838c-6.272-2.236-12.988-3.516-20.028-3.516c-32.99,0-59.733,26.743-59.733,59.733c0,24.567,14.842,45.708,36.003,54.8c-21.161,9.092-36.003,30.233-36.003,54.8c0,32.99,26.743,59.733,59.733,59.733c16.887,0,32.145-7.013,43.061-18.26c10.916,11.247,26.174,18.26,43.061,18.26c16.887,0,32.145-7.013,43.061-18.26c10.916,11.247,26.174,18.26,43.061,18.26c32.99,0,59.733-26.743,59.733-59.733c0-24.567-14.842-45.708-36.003-54.8C403.291,230.175,418.133,209.034,418.133,184.467z\" fill=\"#24AE5F\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <path d=\"M273.067,261.267H256h-17.067c0,0,8.533,230.4-59.733,230.4h153.6C264.533,491.667,273.067,261.267,273.067,261.267\" fill=\"#805333\"/>\r\n        <path d=\"M503.467,500.2H8.533c-4.71,0-8.533-3.814-8.533-8.533c0-4.719,3.823-8.533,8.533-8.533h494.933c4.71,0,8.533,3.814,8.533,8.533C512,496.386,508.177,500.2,503.467,500.2\" fill=\"#95A5A5\"/>\r\n      </svg>`,\r\n    ],\r\n    \"house_building\": [\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <polygon points=\"256,50 150,150 150,400 362,400 362,150\" fill=\"#E74C3C\"/>\r\n        <rect x=\"150\" y=\"150\" width=\"212\" height=\"250\" fill=\"#3498DB\"/>\r\n        <rect x=\"220\" y=\"300\" width=\"60\" height=\"100\" fill=\"#8B4513\"/>\r\n        <rect x=\"180\" y=\"200\" width=\"40\" height=\"40\" fill=\"#87CEEB\"/>\r\n        <rect x=\"290\" y=\"200\" width=\"40\" height=\"40\" fill=\"#87CEEB\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <polygon points=\"256,50 150,150 150,400 362,400 362,150\" fill=\"#E74C3C\"/>\r\n        <rect x=\"150\" y=\"150\" width=\"212\" height=\"250\" fill=\"#3498DB\"/>\r\n        <rect x=\"220\" y=\"300\" width=\"60\" height=\"100\" fill=\"#8B4513\"/>\r\n        <rect x=\"180\" y=\"200\" width=\"40\" height=\"40\" fill=\"#87CEEB\"/>\r\n      </svg>`\r\n    ],\r\n    \"clock_time\": [\r\n      `<svg viewBox=\"0 0 490 490\">\r\n        <circle cx=\"245\" cy=\"245\" r=\"204.3\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"40\"/>\r\n        <circle cx=\"245\" cy=\"245\" r=\"15\" fill=\"#2C3E50\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 490 490\">\r\n        <circle cx=\"245\" cy=\"245\" r=\"204.3\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"40\"/>\r\n        <circle cx=\"245\" cy=\"245\" r=\"15\" fill=\"#2C3E50\"/>\r\n        <line x1=\"245\" y1=\"245\" x2=\"245\" y2=\"120\" stroke=\"#2C3E50\" stroke-width=\"8\" stroke-linecap=\"round\"/>\r\n        <line x1=\"245\" y1=\"245\" x2=\"320\" y2=\"245\" stroke=\"#2C3E50\" stroke-width=\"6\" stroke-linecap=\"round\"/>\r\n      </svg>`\r\n    ],\r\n    \"face_glasses\": [\r\n      `<svg viewBox=\"0 0 293.246 293.246\">\r\n        <circle cx=\"146.623\" cy=\"100\" r=\"80\" fill=\"#FDBCB4\" stroke=\"#E67E22\" stroke-width=\"4\"/>\r\n        <circle cx=\"120\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <circle cx=\"173\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <path d=\"M130,110 Q146.623,125 163,110\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 293.246 293.246\">\r\n        <circle cx=\"146.623\" cy=\"100\" r=\"80\" fill=\"#FDBCB4\" stroke=\"#E67E22\" stroke-width=\"4\"/>\r\n        <circle cx=\"120\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <circle cx=\"173\" cy=\"85\" r=\"8\" fill=\"#2C3E50\"/>\r\n        <path d=\"M130,110 Q146.623,125 163,110\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n        <ellipse cx=\"105\" cy=\"85\" rx=\"20\" ry=\"15\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n        <ellipse cx=\"188\" cy=\"85\" rx=\"20\" ry=\"15\" fill=\"none\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n        <line x1=\"125\" y1=\"85\" x2=\"168\" y2=\"85\" stroke=\"#2C3E50\" stroke-width=\"3\"/>\r\n      </svg>`\r\n    ]\r\n  },\r\n  // Category 3: Quantity variation - Different objects in different quantities\r\n  {\r\n    \"gift_box\": [\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <path style=\"fill:#FFE14D;\" d=\"M379.931,19.548c-26.08-26.066-68.503-26.063-94.565-0.001C276.374,28.533,265.133,45.04,256,63.421\r\n          c-9.131-18.38-20.372-34.886-29.362-43.87c-26.066-26.067-68.49-26.068-94.573,0c-26.075,26.075-26.075,68.499,0,94.574\r\n          c14.649,14.65,44.887,32.01,70.338,40.382c1.686,0.554,3.45,0.837,5.225,0.837h41.729c2.302,0,4.556-0.495,6.638-1.397\r\n          c2.083,0.904,4.339,1.397,6.647,1.397h41.729c1.775,0,3.539-0.283,5.225-0.837c25.451-8.374,55.69-25.734,70.337-40.382\r\n          C406.008,88.051,406.008,45.627,379.931,19.548z\"/>\r\n        <path style=\"fill:#E6E9EE;\" d=\"M89.655,195.862v285.517c0,16.569,13.431,30,30,30h272.69c16.569,0,30-13.431,30-30V195.862H89.655z\"/>\r\n        <rect x=\"249.655\" y=\"180.965\" style=\"fill:#F06262;\" width=\"12.69\" height=\"345.414\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <g transform=\"translate(-140,0) scale(0.35)\">\r\n          <path style=\"fill:#FFE14D;\" d=\"M379.931,19.548c-26.08-26.066-68.503-26.063-94.565-0.001C276.374,28.533,265.133,45.04,256,63.421\r\n            c-9.131-18.38-20.372-34.886-29.362-43.87c-26.066-26.067-68.49-26.068-94.573,0c-26.075,26.075-26.075,68.499,0,94.574\r\n            c14.649,14.65,44.887,32.01,70.338,40.382c1.686,0.554,3.45,0.837,5.225,0.837h41.729c2.302,0,4.556-0.495,6.638-1.397\r\n            c2.083,0.904,4.339,1.397,6.647,1.397h41.729c1.775,0,3.539-0.283,5.225-0.837c25.451-8.374,55.69-25.734,70.337-40.382\r\n            C406.008,88.051,406.008,45.627,379.931,19.548z\"/>\r\n          <path style=\"fill:#E6E9EE;\" d=\"M89.655,195.862v285.517c0,16.569,13.431,30,30,30h272.69c16.569,0,30-13.431,30-30V195.862H89.655z\"/>\r\n          <rect x=\"249.655\" y=\"180.965\" style=\"fill:#F06262;\" width=\"12.69\" height=\"345.414\"/>\r\n        </g>\r\n        <g transform=\"translate(0,0) scale(0.35)\">\r\n          <path style=\"fill:#FFE14D;\" d=\"M379.931,19.548c-26.08-26.066-68.503-26.063-94.565-0.001C276.374,28.533,265.133,45.04,256,63.421\r\n            c-9.131-18.38-20.372-34.886-29.362-43.87c-26.066-26.067-68.49-26.068-94.573,0c-26.075,26.075-26.075,68.499,0,94.574\r\n            c14.649,14.65,44.887,32.01,70.338,40.382c1.686,0.554,3.45,0.837,5.225,0.837h41.729c2.302,0,4.556-0.495,6.638-1.397\r\n            c2.083,0.904,4.339,1.397,6.647,1.397h41.729c1.775,0,3.539-0.283,5.225-0.837c25.451-8.374,55.69-25.734,70.337-40.382\r\n            C406.008,88.051,406.008,45.627,379.931,19.548z\"/>\r\n          <path style=\"fill:#E6E9EE;\" d=\"M89.655,195.862v285.517c0,16.569,13.431,30,30,30h272.69c16.569,0,30-13.431,30-30V195.862H89.655z\"/>\r\n          <rect x=\"249.655\" y=\"180.965\" style=\"fill:#F06262;\" width=\"12.69\" height=\"345.414\"/>\r\n        </g>\r\n        <g transform=\"translate(140,0) scale(0.35)\">\r\n          <path style=\"fill:#FFE14D;\" d=\"M379.931,19.548c-26.08-26.066-68.503-26.063-94.565-0.001C276.374,28.533,265.133,45.04,256,63.421\r\n            c-9.131-18.38-20.372-34.886-29.362-43.87c-26.066-26.067-68.49-26.068-94.573,0c-26.075,26.075-26.075,68.499,0,94.574\r\n            c14.649,14.65,44.887,32.01,70.338,40.382c1.686,0.554,3.45,0.837,5.225,0.837h41.729c2.302,0,4.556-0.495,6.638-1.397\r\n            c2.083,0.904,4.339,1.397,6.647,1.397h41.729c1.775,0,3.539-0.283,5.225-0.837c25.451-8.374,55.69-25.734,70.337-40.382\r\n            C406.008,88.051,406.008,45.627,379.931,19.548z\"/>\r\n          <path style=\"fill:#E6E9EE;\" d=\"M89.655,195.862v285.517c0,16.569,13.431,30,30,30h272.69c16.569,0,30-13.431,30-30V195.862H89.655z\"/>\r\n          <rect x=\"249.655\" y=\"180.965\" style=\"fill:#F06262;\" width=\"12.69\" height=\"345.414\"/>\r\n        </g>\r\n      </svg>`\r\n    ],\r\n    \"apple_fruit\": [\r\n      `<svg viewBox=\"0 0 950.458 950.458\">\r\n        <path d=\"M616.395,235.458c40.617-21.654,72.93-58.561,92.375-99.952c16.842-35.848,25.32-75.332,24.163-114.967C732.606,9.351,723.837,0,712.394,0c-3.062,0-6.044,0.732-8.743,2.03c-0.967,0.161-1.928,0.409-2.877,0.757c-27.547,10.102-55.697,18.297-82.406,30.593c-26.518,12.208-50.176,29.639-72.618,48.138c-31.717,26.144-60.03,57.561-79.92,93.625\" fill=\"#228B22\"/>\r\n        <ellipse cx=\"475\" cy=\"600\" rx=\"300\" ry=\"350\" fill=\"#FF6B6B\"/>\r\n        <path d=\"M450,200 Q470,180 490,200\" fill=\"#8B4513\" stroke=\"#654321\" stroke-width=\"3\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 950.458 950.458\">\r\n        <g transform=\"translate(-200,0) scale(0.6)\">\r\n          <ellipse cx=\"475\" cy=\"600\" rx=\"300\" ry=\"350\" fill=\"#FF6B6B\"/>\r\n          <path d=\"M450,200 Q470,180 490,200\" fill=\"#8B4513\"/>\r\n        </g>\r\n        <g transform=\"translate(200,0) scale(0.6)\">\r\n          <ellipse cx=\"475\" cy=\"600\" rx=\"300\" ry=\"350\" fill=\"#FF6B6B\"/>\r\n          <path d=\"M450,200 Q470,180 490,200\" fill=\"#8B4513\"/>\r\n        </g>\r\n      </svg>`\r\n    ],\r\n    \"car_vehicle\": [\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <path style=\"fill:#FFDD09;\" d=\"M450.413,144.067H57.88C42.52,165.4,37.4,191.853,42.52,220.013L57.88,280.6h392.533l15.36-60.587C472.6,193.56,466.627,165.4,450.413,144.067\"/>\r\n        <path style=\"fill:#54C9FD;\" d=\"M101.4,186.733H41.667c-0.853,10.24-0.853,21.333,0.853,33.28l4.267,17.92H127L101.4,186.733z\"/>\r\n        <circle cx=\"120\" cy=\"320\" r=\"40\" fill=\"#2C3E50\"/>\r\n        <circle cx=\"390\" cy=\"320\" r=\"40\" fill=\"#2C3E50\"/>\r\n      </svg>`,\r\n      `<svg viewBox=\"0 0 512 512\">\r\n        <g transform=\"translate(-130,20) scale(0.7)\">\r\n          <path style=\"fill:#FFDD09;\" d=\"M450.413,144.067H57.88C42.52,165.4,37.4,191.853,42.52,220.013L57.88,280.6h392.533l15.36-60.587C472.6,193.56,466.627,165.4,450.413,144.067\"/>\r\n          <circle cx=\"120\" cy=\"320\" r=\"40\" fill=\"#2C3E50\"/>\r\n          <circle cx=\"390\" cy=\"320\" r=\"40\" fill=\"#2C3E50\"/>\r\n        </g>\r\n        <g transform=\"translate(130,20) scale(0.7)\">\r\n          <path style=\"fill:#FFDD09;\" d=\"M450.413,144.067H57.88C42.52,165.4,37.4,191.853,42.52,220.013L57.88,280.6h392.533l15.36-60.587C472.6,193.56,466.627,165.4,450.413,144.067\"/>\r\n          <circle cx=\"120\" cy=\"320\" r=\"40\" fill=\"#2C3E50\"/>\r\n          <circle cx=\"390\" cy=\"320\" r=\"40\" fill=\"#2C3E50\"/>\r\n        </g>\r\n      </svg>`\r\n    ]\r\n  }\r\n]","/* This file contains the configurable text used in the pattern comparison timeline.\r\n*/\r\nexport const trial_text = {\r\n    same_button: \"Same\",\r\n    different_button: \"Different\",\r\n    prompt: \"Are these two patterns the same?\",\r\n    task_complete_header: \"Task Complete!\",\r\n    task_complete_message: \"Thank you for participating in the pattern comparison task.\",\r\n    fixation_cross: \"+\",\r\n}\r\n\r\n/* \r\n* This is an array of page objects that have configurable texts for the instruction pages before the actual trials\r\n* You can make as many pages as you would like, just add a new array and your text (e.g. ,{header2: \"new page here\"})\r\n* \"page\" objects are separated by commas, just as in any array.\r\n* keys, in the order they show on a page: header, header2, description, task_explanation, performance_note,\r\nstrategy_title, strategy_intro, strategy_points (array of strings), start_prompt \r\n* You can leave any keys or text options out if you do not want them in any specific page\r\n*/\r\n\r\nexport const instruction_pages = [{  //example page, you can remove any of the keys you do not want to use\r\n    header: \"header1 in <h1>\",\r\n    header2: \"header2 in <h2>\",\r\n    description: \"This is a description of the task in <p>.\",\r\n    task_explanation: \"More detailed explanation of the task in <p>.\",\r\n    performance_note: \"Note about performance in <p>.\",\r\n    strategy_title: \"Strategy Title in <h2>\",\r\n    strategy_intro: \"Introduction to the strategy in <p>.\",\r\n    strategy_points: [\r\n        \"Point 1 about the strategy\",\r\n        \"Point 2 about the strategy\",\r\n        \"Point 3 about the strategy\"\r\n    ],\r\n    start_prompt: \"Click continue to start the task.\",\r\n    buttons: [\"button text\", \"All buttons will just move onto next page\", \"they will be registered in data though!\"],\r\n    button_html: [\"<button class='jspsych-btn'>{choice}</button>\", \"<button class='jspsych-btn'>{choice}</button>\"],\r\n},\r\n    {\r\n    header: \"Pattern Comparison Task\",               //<h1>\r\n    header2: \"Visual Pattern Recognition\",     //<h2>\r\n    description: \"In this task, you will see two visual patterns displayed side by side.\", //<p>\r\n    task_explanation: \"Your job is to determine whether the two patterns are exactly the <strong>same</strong> or <strong>different</strong>.\", //<p>\r\n    performance_note: \"Try to respond as quickly and accurately as possible.\",                  //<p>\r\n    \r\n    start_prompt: \"Click continue to move to the next page.\",  //<p> in bold and blue \r\n    buttons: [\"Continue\"],\r\n}, //page two, you can add more pages if needed by creating more objects in the array\r\n{\r\n    strategy_title: \"Instructions\",\r\n    strategy_intro: \"For each trial:\",\r\n    strategy_points: [\r\n        \"Look carefully at both patterns\",\r\n        \"Compare all visual elements (shape, color, size, quantity)\",\r\n        \"Click 'Same' if patterns are identical\",\r\n        \"Click 'Different' if patterns vary in any way\",\r\n        \"Respond as quickly and accurately as possible\"\r\n    ],\r\n    start_prompt: \"Click continue to start the task.\",\r\n    buttons: [\"Start\"],\r\n}];","import { JsPsych, TrialType } from \"jspsych\"\r\nimport HtmlButtonResponsePlugin from \"@jspsych/plugin-html-button-response\"\r\nimport { test_categories } from \"./test-categories\"\r\nimport { trial_text, instruction_pages } from \"./text\"\r\n\r\ninterface PatternComparisonConfig {\r\n  /** Array of test categories, each containing test pairs */\r\n  test_categories?: any[]\r\n  /** Number of trials to generate */\r\n  num_trials?: number\r\n  /** Instructions text to display above each trial */\r\n  prompt?: string\r\n  /** Enable text-to-speech for instructions and prompts */\r\n  enable_tts?: boolean\r\n  /** Text for the \"same\" button */\r\n  same_button_text?: string\r\n  /** Text for the \"different\" button */\r\n  different_button_text?: string\r\n  /** Maximum time allowed per trial (in ms) */\r\n  trial_timeout?: number\r\n  /** Inter-trial interval (in ms) */\r\n  inter_trial_interval?: number\r\n  /** Show instruction pages before the task */\r\n  show_instructions?: boolean\r\n  /** Custom instruction texts */\r\n  instruction_texts?: typeof instruction_pages\r\n}\r\n\r\nfunction speakText(text: string) {\r\n  if ('speechSynthesis' in window) {\r\n    // Stop any ongoing speech\r\n    speechSynthesis.cancel();\r\n    \r\n    // Create and speak the utterance\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.rate = 0.8; // Slightly slower for clarity\r\n    utterance.volume = 0.8;\r\n    speechSynthesis.speak(utterance);\r\n  }\r\n}\r\n\r\nfunction createInstructions(instruction_pages_data = instruction_pages, enable_tts = false) {\r\n  const instruction_timeline = [];\r\n\r\n  // Create each instruction page as a separate trial\r\n  instruction_pages_data.forEach((page_data, page_index) => {\r\n\r\n    // Build page text for TTS\r\n    const page_text = [\r\n      page_data.header,\r\n      page_data.header2,\r\n      page_data.description,\r\n      page_data.task_explanation,\r\n      page_data.performance_note,\r\n      page_data.strategy_title,\r\n      page_data.strategy_intro,\r\n      ...(page_data.strategy_points || []),\r\n      page_data.start_prompt,\r\n    ].filter(Boolean).join(' ');       //remove undefined strings by filtering out falsy values\r\n\r\n    instruction_timeline.push({\r\n      type: HtmlButtonResponsePlugin,\r\n      stimulus: `\r\n        <div class=\"pattern-instructions-container\">\r\n          <h1>${page_data.header || \"\"}</h1>\r\n          <h2>${page_data.header2 || \"\"}</h2>\r\n          <p>${page_data.description || \"\"}</p>\r\n          <p>${page_data.task_explanation || \"\"}</p>\r\n          <p class=\"performance-note\">${page_data.performance_note || \"\"}</p>\r\n          ${page_data.strategy_title ? `<h2>${page_data.strategy_title}</h2>` : \"\"}\r\n          ${page_data.strategy_intro ? `<p>${page_data.strategy_intro}</p>` : \"\"}\r\n          ${page_data.strategy_points ? `\r\n            <ul>\r\n              ${page_data.strategy_points.map(point => `<li>${point}</li>`).join('')}\r\n            </ul>\r\n          ` : \"\"}\r\n          ${page_data.start_prompt ? `<p class=\"start-prompt\">${page_data.start_prompt}</p>` : \"\"}\r\n        </div>\r\n      `,\r\n      choices: page_data.buttons,\r\n      margin_horizontal: '15px',\r\n      margin_vertical: '10px',\r\n      button_html: function(choice, choice_index) {\r\n        // Check if custom button HTML is provided for this page\r\n        if (page_data.button_html && page_data.button_html[choice_index]) {\r\n          return page_data.button_html[choice_index].replace('{choice}', choice);\r\n        }\r\n        // Default button styling\r\n        return `<button class=\"jspsych-btn pattern-continue-button\">${choice}</button>`;\r\n      },\r\n      on_start: enable_tts ? function() {\r\n        // Stop any ongoing speech first\r\n        speechSynthesis.cancel();\r\n        // Speak the page content when page starts\r\n        if (page_text.trim()) {\r\n          speakText(page_text);\r\n        }\r\n      } : undefined,\r\n      on_finish: function(data: any) {\r\n        // Stop speech when moving to next page\r\n        speechSynthesis.cancel();\r\n      },\r\n      data: {\r\n        page_index: page_index,\r\n        task: 'instruction-page'\r\n      }\r\n    });\r\n  });\r\n\r\n  return {\r\n    timeline: instruction_timeline\r\n  };\r\n}\r\n\r\nfunction generateTrials(config: PatternComparisonConfig) {\r\n  const test_svg = config.test_categories || test_categories;\r\n  const num_trials = config.num_trials || 20;\r\n  const trials = [];\r\n\r\n  for (let i = 0; i < num_trials; i++) {\r\n    // Randomly select a category\r\n    const category_index = Math.floor(Math.random() * test_svg.length);\r\n    const selected_category = test_svg[category_index];\r\n    \r\n    // Randomly select a test within the category\r\n    const test_names = Object.keys(selected_category);\r\n    const test_name = test_names[Math.floor(Math.random() * test_names.length)];\r\n    const [original_svg, edited_svg] = selected_category[test_name];\r\n    \r\n    // Randomly decide if patterns should be same or different\r\n    const is_same = Math.random() < 0.5;\r\n    \r\n    const pattern1 = original_svg;\r\n    const pattern2 = is_same ? original_svg : edited_svg;\r\n\r\n    trials.push({\r\n      pattern1,\r\n      pattern2,\r\n      correct_answer: is_same ? 0 : 1, // 0 for same, 1 for different\r\n      category_index,\r\n      test_name,\r\n      is_same\r\n    });\r\n  }\r\n\r\n  return trials;\r\n}\r\n\r\nexport function createTimeline(jsPsych: JsPsych, config: PatternComparisonConfig = {}) {\r\n  const {\r\n    prompt = trial_text.prompt,\r\n    enable_tts = false,\r\n    same_button_text = trial_text.same_button,\r\n    different_button_text = trial_text.different_button,\r\n    trial_timeout = 10000,\r\n    inter_trial_interval = 500,\r\n    show_instructions = false,\r\n    instruction_texts = instruction_pages\r\n  } = config\r\n\r\n  const trials = generateTrials(config)\r\n  const timeline = []\r\n\r\n\r\n  // Create trial timeline\r\n  trials.forEach((trial, index) => {\r\n    timeline.push({\r\n      type: HtmlButtonResponsePlugin,\r\n      stimulus: `\r\n        <div class=\"pattern-comparison-container\">\r\n          <div class=\"pattern-instructions\">${prompt}</div>\r\n          <div class=\"patterns-container\">\r\n            <div class=\"pattern\">${trial.pattern1}</div>\r\n            <div class=\"pattern\">${trial.pattern2}</div>\r\n          </div>\r\n        </div>\r\n      `,\r\n      choices: [same_button_text, different_button_text],\r\n      margin_horizontal: '20px',\r\n      margin_vertical: '15px',\r\n      button_html: function(choice, choice_index) {\r\n        return `<button class=\"jspsych-btn pattern-trial-button\">${choice}</button>`;\r\n      },\r\n      trial_duration: trial_timeout,\r\n      data: {\r\n        task: 'pattern-comparison',\r\n        trial_number: index + 1,\r\n        correct_answer: trial.correct_answer,\r\n        category_index: trial.category_index,\r\n        test_name: trial.test_name,\r\n        is_same: trial.is_same,\r\n        pattern1: trial.pattern1,\r\n        pattern2: trial.pattern2\r\n      },\r\n      on_finish: function(data: any) {\r\n        data.correct = data.response === data.correct_answer\r\n        data.reaction_time = data.rt\r\n        // Stop any ongoing speech when trial ends\r\n        speechSynthesis.cancel();\r\n      },\r\n      on_start: function() {\r\n        if (enable_tts) {\r\n          speakText(prompt);\r\n        }\r\n      }\r\n    })\r\n\r\n    // Inter-trial interval\r\n    if (index < trials.length - 1) {\r\n      timeline.push({\r\n        type: HtmlButtonResponsePlugin,\r\n        stimulus: `<div class=\"pattern-fixation\">${trial_text.fixation_cross}</div>`,\r\n        choices: [],\r\n        trial_duration: inter_trial_interval\r\n      })\r\n    }\r\n  })\r\n\r\n  // End screen\r\n  timeline.push({\r\n    type: HtmlButtonResponsePlugin,\r\n    stimulus: `\r\n      <div class=\"pattern-end-screen\">\r\n        <h2>${trial_text.task_complete_header}</h2>\r\n        <p>${trial_text.task_complete_message}</p>\r\n      </div>\r\n    `,\r\n    choices: [\"End\"],\r\n    button_html: function(choice, choice_HTML) { //this is supposed to return the HTML for the each respective button.\r\n      return `<button class=\"jspsych-btn pattern-continue-button\">${choice}</button>`;\r\n    }\r\n  })\r\n\r\n  // Create the main task timeline\r\n  const task_timeline = {\r\n    timeline: timeline\r\n  };\r\n\r\n  // Return complete timeline with or without detailed instructions\r\n  if (show_instructions) {\r\n    const detailed_instructions = createInstructions(instruction_texts, enable_tts);\r\n    \r\n    const nested_timeline = {\r\n      timeline: [detailed_instructions, task_timeline]\r\n    };\r\n    return nested_timeline;\r\n\r\n  } else {\r\n    return task_timeline;\r\n  }\r\n}\r\n\r\n/** Calculate accuracy and reaction time statistics by category */\r\nfunction calculatePerformance(data: any[]) {\r\n  const trial_data = data.filter(d => d.task === 'pattern-comparison')\r\n  const correct = trial_data.filter(d => d.correct).length\r\n  const total = trial_data.length\r\n  const accuracy = total > 0 ? (correct / total) * 100 : 0\r\n  \r\n  const valid_rts = trial_data.filter(d => d.correct && d.rt !== null).map(d => d.rt)\r\n  const mean_rt = valid_rts.length > 0 ? valid_rts.reduce((a, b) => a + b, 0) / valid_rts.length : null\r\n  \r\n  // Calculate performance by category\r\n  const category_performance = [0, 1, 2].map(category_index => {\r\n    const category_trials = trial_data.filter(d => d.category_index === category_index)\r\n    const category_correct = category_trials.filter(d => d.correct).length\r\n    const category_total = category_trials.length\r\n    const category_accuracy = category_total > 0 ? (category_correct / category_total) * 100 : 0\r\n    \r\n    const category_valid_rts = category_trials.filter(d => d.correct && d.rt !== null).map(d => d.rt)\r\n    const category_mean_rt = category_valid_rts.length > 0 ? \r\n      category_valid_rts.reduce((a, b) => a + b, 0) / category_valid_rts.length : null\r\n    \r\n    return {\r\n      category_index,\r\n      accuracy: category_accuracy,\r\n      mean_reaction_time: category_mean_rt,\r\n      total_trials: category_total,\r\n      correct_trials: category_correct\r\n    }\r\n  })\r\n  \r\n  return {\r\n    overall: {\r\n      accuracy,\r\n      mean_reaction_time: mean_rt,\r\n      total_trials: total,\r\n      correct_trials: correct\r\n    },\r\n    by_category: category_performance\r\n  }\r\n}\r\n\r\n//gotta check standardization of these exports\r\n\r\nexport const timelineUnits = {\r\n  instructions: \"Instructions for the pattern comparison task\",\r\n  trial: \"Single pattern comparison trial\",\r\n  interTrialInterval: \"Fixation cross between trials\",\r\n  endScreen: \"Task completion screen\"\r\n}\r\n\r\nexport const utils = {\r\n  generateTrials,\r\n  createInstructions,\r\n  speakText,\r\n  calculatePerformance\r\n}\r\n\r\n// Export text configuration for external use\r\nexport { trial_text, instruction_pages, createInstructions }\r\n\r\n// Default export for convenience\r\nexport default { createTimeline, timelineUnits, utils }"]}